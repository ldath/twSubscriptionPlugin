<?php



/**
 * This class defines the structure of the 'tw_subscription_list' table.
 *
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.map
 */
class twSubscriptionListTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'plugins.twSubscriptionPlugin.lib.model.map.twSubscriptionListTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('tw_subscription_list');
        $this->setPhpName('twSubscriptionList');
        $this->setClassname('twSubscriptionList');
        $this->setPackage('plugins.twSubscriptionPlugin.lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addForeignKey('TYPE_ID', 'TypeId', 'INTEGER', 'tw_subscription_list_type', 'ID', true, null, null);
        $this->addForeignKey('TEMPLATE_ID', 'TemplateId', 'INTEGER', 'tw_subscription_template', 'ID', false, null, null);
        $this->addColumn('LISTNAME', 'Listname', 'VARCHAR', true, 250, null);
        $this->addColumn('LISTDESC', 'Listdesc', 'LONGVARCHAR', false, null, null);
        $this->addColumn('FROMNAME', 'Fromname', 'VARCHAR', false, 250, null);
        $this->addColumn('MAILFROM', 'Mailfrom', 'VARCHAR', true, 250, null);
        $this->addColumn('SMTPHOST', 'Smtphost', 'VARCHAR', false, 150, null);
        $this->addColumn('SMTPPORT', 'Smtpport', 'INTEGER', false, null, null);
        $this->addColumn('SMTPENCR', 'Smtpencr', 'INTEGER', false, null, null);
        $this->addColumn('SMTPUSER', 'Smtpuser', 'VARCHAR', false, 50, null);
        $this->addColumn('SMTPPASS', 'Smtppass', 'VARCHAR', false, 50, null);
        $this->addColumn('WEBSITE_BASE_URL', 'WebsiteBaseUrl', 'VARCHAR', true, 250, null);
        $this->addColumn('WEBSITE_SHARED_KEY', 'WebsiteSharedKey', 'VARCHAR', true, 40, null);
        $this->addColumn('LASTSYNC_AT', 'LastsyncAt', 'TIMESTAMP', false, null, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('twSubscriptionListType', 'twSubscriptionListType', RelationMap::MANY_TO_ONE, array('type_id' => 'id', ), 'CASCADE', null);
        $this->addRelation('twSubscriptionTemplate', 'twSubscriptionTemplate', RelationMap::MANY_TO_ONE, array('template_id' => 'id', ), 'SET NULL', null);
        $this->addRelation('twSubscriptionEmail', 'twSubscriptionEmail', RelationMap::ONE_TO_MANY, array('id' => 'list_id', ), 'CASCADE', null, 'twSubscriptionEmails');
        $this->addRelation('twSubscriptionListInvitation', 'twSubscriptionListInvitation', RelationMap::ONE_TO_MANY, array('id' => 'list_id', ), 'CASCADE', null, 'twSubscriptionListInvitations');
        $this->addRelation('twSubscriptionMailing', 'twSubscriptionMailing', RelationMap::ONE_TO_MANY, array('id' => 'list_id', ), 'CASCADE', null, 'twSubscriptionMailings');
        $this->addRelation('twSubscriptionMailQueue', 'twSubscriptionMailQueue', RelationMap::ONE_TO_MANY, array('id' => 'list_id', ), 'CASCADE', null, 'twSubscriptionMailQueues');
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
        );
    } // getBehaviors()

} // twSubscriptionListTableMap
