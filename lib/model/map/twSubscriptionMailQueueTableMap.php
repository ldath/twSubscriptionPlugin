<?php



/**
 * This class defines the structure of the 'tw_subscription_mail_queue' table.
 *
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.map
 */
class twSubscriptionMailQueueTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'plugins.twSubscriptionPlugin.lib.model.map.twSubscriptionMailQueueTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('tw_subscription_mail_queue');
        $this->setPhpName('twSubscriptionMailQueue');
        $this->setClassname('twSubscriptionMailQueue');
        $this->setPackage('plugins.twSubscriptionPlugin.lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addForeignKey('MAILING_ID', 'MailingId', 'INTEGER', 'tw_subscription_mailing', 'ID', true, null, null);
        $this->addForeignKey('MESSAGE_ID', 'MessageId', 'INTEGER', 'tw_subscription_message', 'ID', true, null, null);
        $this->addForeignKey('TYPE_ID', 'TypeId', 'INTEGER', 'tw_subscription_message_type', 'ID', true, null, null);
        $this->addColumn('SUBJECT', 'Subject', 'LONGVARCHAR', true, null, null);
        $this->addColumn('MESSAGE', 'Message', 'LONGVARCHAR', true, null, null);
        $this->addForeignKey('LIST_ID', 'ListId', 'INTEGER', 'tw_subscription_list', 'ID', true, null, null);
        $this->addColumn('FROMNAME', 'Fromname', 'VARCHAR', false, 250, null);
        $this->addColumn('MAILFROM', 'Mailfrom', 'VARCHAR', true, 250, null);
        $this->addColumn('SMTPHOST', 'Smtphost', 'VARCHAR', false, 150, null);
        $this->addColumn('SMTPUSER', 'Smtpuser', 'VARCHAR', false, 50, null);
        $this->addColumn('SMTPPASS', 'Smtppass', 'VARCHAR', false, 50, null);
        $this->addColumn('SUBSCRIPTION_BASE_URL', 'SubscriptionBaseUrl', 'VARCHAR', false, 250, null);
        $this->addColumn('WEBSITE_BASE_URL', 'WebsiteBaseUrl', 'VARCHAR', false, 250, null);
        $this->addColumn('REMAIL', 'Remail', 'VARCHAR', true, 250, null);
        $this->addColumn('RNAME', 'Rname', 'VARCHAR', false, 250, null);
        $this->addColumn('UNSUBSCRIBE', 'Unsubscribe', 'VARCHAR', true, 40, null);
        $this->addColumn('UNSUBLINK', 'Unsublink', 'VARCHAR', false, 250, null);
        $this->addColumn('TIME_TO_SEND', 'TimeToSend', 'TIMESTAMP', true, null, null);
        $this->addColumn('TRY_SENT', 'TrySent', 'TINYINT', true, null, 0);
        $this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('twSubscriptionMailing', 'twSubscriptionMailing', RelationMap::MANY_TO_ONE, array('mailing_id' => 'id', ), 'CASCADE', null);
        $this->addRelation('twSubscriptionMessage', 'twSubscriptionMessage', RelationMap::MANY_TO_ONE, array('message_id' => 'id', ), 'CASCADE', null);
        $this->addRelation('twSubscriptionMessageType', 'twSubscriptionMessageType', RelationMap::MANY_TO_ONE, array('type_id' => 'id', ), 'CASCADE', null);
        $this->addRelation('twSubscriptionList', 'twSubscriptionList', RelationMap::MANY_TO_ONE, array('list_id' => 'id', ), 'CASCADE', null);
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
            'symfony_timestampable' => array('create_column' => 'created_at', ),
        );
    } // getBehaviors()

} // twSubscriptionMailQueueTableMap
