<?php


/**
 * Base class that represents a query for the 'tw_subscription_mailing' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 * @method     twSubscriptionMailingQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twSubscriptionMailingQuery orderByListId($order = Criteria::ASC) Order by the list_id column
 * @method     twSubscriptionMailingQuery orderByMessageId($order = Criteria::ASC) Order by the message_id column
 * @method     twSubscriptionMailingQuery orderByTimeToSend($order = Criteria::ASC) Order by the time_to_send column
 * @method     twSubscriptionMailingQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method     twSubscriptionMailingQuery groupById() Group by the id column
 * @method     twSubscriptionMailingQuery groupByListId() Group by the list_id column
 * @method     twSubscriptionMailingQuery groupByMessageId() Group by the message_id column
 * @method     twSubscriptionMailingQuery groupByTimeToSend() Group by the time_to_send column
 * @method     twSubscriptionMailingQuery groupByCreatedAt() Group by the created_at column
 *
 * @method     twSubscriptionMailingQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twSubscriptionMailingQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twSubscriptionMailingQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twSubscriptionMailingQuery leftJointwSubscriptionList($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionMailingQuery rightJointwSubscriptionList($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionMailingQuery innerJointwSubscriptionList($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionList relation
 *
 * @method     twSubscriptionMailingQuery leftJointwSubscriptionMessage($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMessage relation
 * @method     twSubscriptionMailingQuery rightJointwSubscriptionMessage($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMessage relation
 * @method     twSubscriptionMailingQuery innerJointwSubscriptionMessage($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMessage relation
 *
 * @method     twSubscriptionMailingQuery leftJointwSubscriptionMailQueue($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMailQueue relation
 * @method     twSubscriptionMailingQuery rightJointwSubscriptionMailQueue($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMailQueue relation
 * @method     twSubscriptionMailingQuery innerJointwSubscriptionMailQueue($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMailQueue relation
 *
 * @method     twSubscriptionMailingQuery leftJointwSubscriptionMailSent($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMailSent relation
 * @method     twSubscriptionMailingQuery rightJointwSubscriptionMailSent($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMailSent relation
 * @method     twSubscriptionMailingQuery innerJointwSubscriptionMailSent($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMailSent relation
 *
 * @method     twSubscriptionMailing findOne(PropelPDO $con = null) Return the first twSubscriptionMailing matching the query
 * @method     twSubscriptionMailing findOneOrCreate(PropelPDO $con = null) Return the first twSubscriptionMailing matching the query, or a new twSubscriptionMailing object populated from the query conditions when no match is found
 *
 * @method     twSubscriptionMailing findOneById(int $id) Return the first twSubscriptionMailing filtered by the id column
 * @method     twSubscriptionMailing findOneByListId(int $list_id) Return the first twSubscriptionMailing filtered by the list_id column
 * @method     twSubscriptionMailing findOneByMessageId(int $message_id) Return the first twSubscriptionMailing filtered by the message_id column
 * @method     twSubscriptionMailing findOneByTimeToSend(string $time_to_send) Return the first twSubscriptionMailing filtered by the time_to_send column
 * @method     twSubscriptionMailing findOneByCreatedAt(string $created_at) Return the first twSubscriptionMailing filtered by the created_at column
 *
 * @method     array findById(int $id) Return twSubscriptionMailing objects filtered by the id column
 * @method     array findByListId(int $list_id) Return twSubscriptionMailing objects filtered by the list_id column
 * @method     array findByMessageId(int $message_id) Return twSubscriptionMailing objects filtered by the message_id column
 * @method     array findByTimeToSend(string $time_to_send) Return twSubscriptionMailing objects filtered by the time_to_send column
 * @method     array findByCreatedAt(string $created_at) Return twSubscriptionMailing objects filtered by the created_at column
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.om
 */
abstract class BasetwSubscriptionMailingQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BasetwSubscriptionMailingQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'twSubscriptionMailing', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new twSubscriptionMailingQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     twSubscriptionMailingQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return twSubscriptionMailingQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof twSubscriptionMailingQuery) {
            return $criteria;
        }
        $query = new twSubscriptionMailingQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   twSubscriptionMailing|twSubscriptionMailing[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = twSubscriptionMailingPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionMailingPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   twSubscriptionMailing A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `LIST_ID`, `MESSAGE_ID`, `TIME_TO_SEND`, `CREATED_AT` FROM `tw_subscription_mailing` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new twSubscriptionMailing();
            $obj->hydrate($row);
            twSubscriptionMailingPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return twSubscriptionMailing|twSubscriptionMailing[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|twSubscriptionMailing[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(twSubscriptionMailingPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(twSubscriptionMailingPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(twSubscriptionMailingPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the list_id column
     *
     * Example usage:
     * <code>
     * $query->filterByListId(1234); // WHERE list_id = 1234
     * $query->filterByListId(array(12, 34)); // WHERE list_id IN (12, 34)
     * $query->filterByListId(array('min' => 12)); // WHERE list_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionList()
     *
     * @param     mixed $listId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByListId($listId = null, $comparison = null)
    {
        if (is_array($listId)) {
            $useMinMax = false;
            if (isset($listId['min'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::LIST_ID, $listId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($listId['max'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::LIST_ID, $listId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailingPeer::LIST_ID, $listId, $comparison);
    }

    /**
     * Filter the query on the message_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMessageId(1234); // WHERE message_id = 1234
     * $query->filterByMessageId(array(12, 34)); // WHERE message_id IN (12, 34)
     * $query->filterByMessageId(array('min' => 12)); // WHERE message_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionMessage()
     *
     * @param     mixed $messageId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByMessageId($messageId = null, $comparison = null)
    {
        if (is_array($messageId)) {
            $useMinMax = false;
            if (isset($messageId['min'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::MESSAGE_ID, $messageId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($messageId['max'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::MESSAGE_ID, $messageId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailingPeer::MESSAGE_ID, $messageId, $comparison);
    }

    /**
     * Filter the query on the time_to_send column
     *
     * Example usage:
     * <code>
     * $query->filterByTimeToSend('2011-03-14'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend('now'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend(array('max' => 'yesterday')); // WHERE time_to_send > '2011-03-13'
     * </code>
     *
     * @param     mixed $timeToSend The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByTimeToSend($timeToSend = null, $comparison = null)
    {
        if (is_array($timeToSend)) {
            $useMinMax = false;
            if (isset($timeToSend['min'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::TIME_TO_SEND, $timeToSend['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($timeToSend['max'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::TIME_TO_SEND, $timeToSend['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailingPeer::TIME_TO_SEND, $timeToSend, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(twSubscriptionMailingPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailingPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related twSubscriptionList object
     *
     * @param   twSubscriptionList|PropelObjectCollection $twSubscriptionList The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionList($twSubscriptionList, $comparison = null)
    {
        if ($twSubscriptionList instanceof twSubscriptionList) {
            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::LIST_ID, $twSubscriptionList->getId(), $comparison);
        } elseif ($twSubscriptionList instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::LIST_ID, $twSubscriptionList->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionList() only accepts arguments of type twSubscriptionList or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionList relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function jointwSubscriptionList($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionList');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionList');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionList relation twSubscriptionList object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionListQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionListQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionList($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionList', 'twSubscriptionListQuery');
    }

    /**
     * Filter the query by a related twSubscriptionMessage object
     *
     * @param   twSubscriptionMessage|PropelObjectCollection $twSubscriptionMessage The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMessage($twSubscriptionMessage, $comparison = null)
    {
        if ($twSubscriptionMessage instanceof twSubscriptionMessage) {
            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::MESSAGE_ID, $twSubscriptionMessage->getId(), $comparison);
        } elseif ($twSubscriptionMessage instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::MESSAGE_ID, $twSubscriptionMessage->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionMessage() only accepts arguments of type twSubscriptionMessage or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMessage relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMessage($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMessage');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMessage');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMessage relation twSubscriptionMessage object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMessageQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMessageQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMessage($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMessage', 'twSubscriptionMessageQuery');
    }

    /**
     * Filter the query by a related twSubscriptionMailQueue object
     *
     * @param   twSubscriptionMailQueue|PropelObjectCollection $twSubscriptionMailQueue  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMailQueue($twSubscriptionMailQueue, $comparison = null)
    {
        if ($twSubscriptionMailQueue instanceof twSubscriptionMailQueue) {
            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::ID, $twSubscriptionMailQueue->getMailingId(), $comparison);
        } elseif ($twSubscriptionMailQueue instanceof PropelObjectCollection) {
            return $this
                ->usetwSubscriptionMailQueueQuery()
                ->filterByPrimaryKeys($twSubscriptionMailQueue->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterBytwSubscriptionMailQueue() only accepts arguments of type twSubscriptionMailQueue or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMailQueue relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMailQueue($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMailQueue');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMailQueue');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMailQueue relation twSubscriptionMailQueue object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMailQueueQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMailQueueQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMailQueue($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMailQueue', 'twSubscriptionMailQueueQuery');
    }

    /**
     * Filter the query by a related twSubscriptionMailSent object
     *
     * @param   twSubscriptionMailSent|PropelObjectCollection $twSubscriptionMailSent  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMailSent($twSubscriptionMailSent, $comparison = null)
    {
        if ($twSubscriptionMailSent instanceof twSubscriptionMailSent) {
            return $this
                ->addUsingAlias(twSubscriptionMailingPeer::ID, $twSubscriptionMailSent->getMailingId(), $comparison);
        } elseif ($twSubscriptionMailSent instanceof PropelObjectCollection) {
            return $this
                ->usetwSubscriptionMailSentQuery()
                ->filterByPrimaryKeys($twSubscriptionMailSent->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterBytwSubscriptionMailSent() only accepts arguments of type twSubscriptionMailSent or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMailSent relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMailSent($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMailSent');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMailSent');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMailSent relation twSubscriptionMailSent object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMailSentQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMailSentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMailSent($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMailSent', 'twSubscriptionMailSentQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   twSubscriptionMailing $twSubscriptionMailing Object to remove from the list of results
     *
     * @return twSubscriptionMailingQuery The current query, for fluid interface
     */
    public function prune($twSubscriptionMailing = null)
    {
        if ($twSubscriptionMailing) {
            $this->addUsingAlias(twSubscriptionMailingPeer::ID, $twSubscriptionMailing->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

} // BasetwSubscriptionMailingQuery