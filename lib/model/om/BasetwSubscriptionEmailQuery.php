<?php


/**
 * Base class that represents a query for the 'tw_subscription_email' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 * @method     twSubscriptionEmailQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twSubscriptionEmailQuery orderByListId($order = Criteria::ASC) Order by the list_id column
 * @method     twSubscriptionEmailQuery orderByStatusId($order = Criteria::ASC) Order by the status_id column
 * @method     twSubscriptionEmailQuery orderByRemail($order = Criteria::ASC) Order by the remail column
 * @method     twSubscriptionEmailQuery orderByRname($order = Criteria::ASC) Order by the rname column
 * @method     twSubscriptionEmailQuery orderByExpires($order = Criteria::ASC) Order by the expires column
 * @method     twSubscriptionEmailQuery orderByAuthKey($order = Criteria::ASC) Order by the auth_key column
 * @method     twSubscriptionEmailQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method     twSubscriptionEmailQuery groupById() Group by the id column
 * @method     twSubscriptionEmailQuery groupByListId() Group by the list_id column
 * @method     twSubscriptionEmailQuery groupByStatusId() Group by the status_id column
 * @method     twSubscriptionEmailQuery groupByRemail() Group by the remail column
 * @method     twSubscriptionEmailQuery groupByRname() Group by the rname column
 * @method     twSubscriptionEmailQuery groupByExpires() Group by the expires column
 * @method     twSubscriptionEmailQuery groupByAuthKey() Group by the auth_key column
 * @method     twSubscriptionEmailQuery groupByCreatedAt() Group by the created_at column
 *
 * @method     twSubscriptionEmailQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twSubscriptionEmailQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twSubscriptionEmailQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twSubscriptionEmailQuery leftJointwSubscriptionList($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionEmailQuery rightJointwSubscriptionList($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionEmailQuery innerJointwSubscriptionList($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionList relation
 *
 * @method     twSubscriptionEmailQuery leftJointwSubscriptionStatus($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionStatus relation
 * @method     twSubscriptionEmailQuery rightJointwSubscriptionStatus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionStatus relation
 * @method     twSubscriptionEmailQuery innerJointwSubscriptionStatus($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionStatus relation
 *
 * @method     twSubscriptionEmail findOne(PropelPDO $con = null) Return the first twSubscriptionEmail matching the query
 * @method     twSubscriptionEmail findOneOrCreate(PropelPDO $con = null) Return the first twSubscriptionEmail matching the query, or a new twSubscriptionEmail object populated from the query conditions when no match is found
 *
 * @method     twSubscriptionEmail findOneById(int $id) Return the first twSubscriptionEmail filtered by the id column
 * @method     twSubscriptionEmail findOneByListId(int $list_id) Return the first twSubscriptionEmail filtered by the list_id column
 * @method     twSubscriptionEmail findOneByStatusId(int $status_id) Return the first twSubscriptionEmail filtered by the status_id column
 * @method     twSubscriptionEmail findOneByRemail(string $remail) Return the first twSubscriptionEmail filtered by the remail column
 * @method     twSubscriptionEmail findOneByRname(string $rname) Return the first twSubscriptionEmail filtered by the rname column
 * @method     twSubscriptionEmail findOneByExpires(string $expires) Return the first twSubscriptionEmail filtered by the expires column
 * @method     twSubscriptionEmail findOneByAuthKey(string $auth_key) Return the first twSubscriptionEmail filtered by the auth_key column
 * @method     twSubscriptionEmail findOneByCreatedAt(string $created_at) Return the first twSubscriptionEmail filtered by the created_at column
 *
 * @method     array findById(int $id) Return twSubscriptionEmail objects filtered by the id column
 * @method     array findByListId(int $list_id) Return twSubscriptionEmail objects filtered by the list_id column
 * @method     array findByStatusId(int $status_id) Return twSubscriptionEmail objects filtered by the status_id column
 * @method     array findByRemail(string $remail) Return twSubscriptionEmail objects filtered by the remail column
 * @method     array findByRname(string $rname) Return twSubscriptionEmail objects filtered by the rname column
 * @method     array findByExpires(string $expires) Return twSubscriptionEmail objects filtered by the expires column
 * @method     array findByAuthKey(string $auth_key) Return twSubscriptionEmail objects filtered by the auth_key column
 * @method     array findByCreatedAt(string $created_at) Return twSubscriptionEmail objects filtered by the created_at column
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.om
 */
abstract class BasetwSubscriptionEmailQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BasetwSubscriptionEmailQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'twSubscriptionEmail', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new twSubscriptionEmailQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     twSubscriptionEmailQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return twSubscriptionEmailQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof twSubscriptionEmailQuery) {
            return $criteria;
        }
        $query = new twSubscriptionEmailQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   twSubscriptionEmail|twSubscriptionEmail[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = twSubscriptionEmailPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionEmailPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   twSubscriptionEmail A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `LIST_ID`, `STATUS_ID`, `REMAIL`, `RNAME`, `EXPIRES`, `AUTH_KEY`, `CREATED_AT` FROM `tw_subscription_email` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new twSubscriptionEmail();
            $obj->hydrate($row);
            twSubscriptionEmailPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return twSubscriptionEmail|twSubscriptionEmail[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|twSubscriptionEmail[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(twSubscriptionEmailPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(twSubscriptionEmailPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the list_id column
     *
     * Example usage:
     * <code>
     * $query->filterByListId(1234); // WHERE list_id = 1234
     * $query->filterByListId(array(12, 34)); // WHERE list_id IN (12, 34)
     * $query->filterByListId(array('min' => 12)); // WHERE list_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionList()
     *
     * @param     mixed $listId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByListId($listId = null, $comparison = null)
    {
        if (is_array($listId)) {
            $useMinMax = false;
            if (isset($listId['min'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::LIST_ID, $listId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($listId['max'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::LIST_ID, $listId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::LIST_ID, $listId, $comparison);
    }

    /**
     * Filter the query on the status_id column
     *
     * Example usage:
     * <code>
     * $query->filterByStatusId(1234); // WHERE status_id = 1234
     * $query->filterByStatusId(array(12, 34)); // WHERE status_id IN (12, 34)
     * $query->filterByStatusId(array('min' => 12)); // WHERE status_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionStatus()
     *
     * @param     mixed $statusId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByStatusId($statusId = null, $comparison = null)
    {
        if (is_array($statusId)) {
            $useMinMax = false;
            if (isset($statusId['min'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::STATUS_ID, $statusId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($statusId['max'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::STATUS_ID, $statusId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::STATUS_ID, $statusId, $comparison);
    }

    /**
     * Filter the query on the remail column
     *
     * Example usage:
     * <code>
     * $query->filterByRemail('fooValue');   // WHERE remail = 'fooValue'
     * $query->filterByRemail('%fooValue%'); // WHERE remail LIKE '%fooValue%'
     * </code>
     *
     * @param     string $remail The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByRemail($remail = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($remail)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $remail)) {
                $remail = str_replace('*', '%', $remail);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::REMAIL, $remail, $comparison);
    }

    /**
     * Filter the query on the rname column
     *
     * Example usage:
     * <code>
     * $query->filterByRname('fooValue');   // WHERE rname = 'fooValue'
     * $query->filterByRname('%fooValue%'); // WHERE rname LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rname The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByRname($rname = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rname)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rname)) {
                $rname = str_replace('*', '%', $rname);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::RNAME, $rname, $comparison);
    }

    /**
     * Filter the query on the expires column
     *
     * Example usage:
     * <code>
     * $query->filterByExpires('2011-03-14'); // WHERE expires = '2011-03-14'
     * $query->filterByExpires('now'); // WHERE expires = '2011-03-14'
     * $query->filterByExpires(array('max' => 'yesterday')); // WHERE expires > '2011-03-13'
     * </code>
     *
     * @param     mixed $expires The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByExpires($expires = null, $comparison = null)
    {
        if (is_array($expires)) {
            $useMinMax = false;
            if (isset($expires['min'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::EXPIRES, $expires['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($expires['max'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::EXPIRES, $expires['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::EXPIRES, $expires, $comparison);
    }

    /**
     * Filter the query on the auth_key column
     *
     * Example usage:
     * <code>
     * $query->filterByAuthKey('fooValue');   // WHERE auth_key = 'fooValue'
     * $query->filterByAuthKey('%fooValue%'); // WHERE auth_key LIKE '%fooValue%'
     * </code>
     *
     * @param     string $authKey The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByAuthKey($authKey = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($authKey)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $authKey)) {
                $authKey = str_replace('*', '%', $authKey);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::AUTH_KEY, $authKey, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(twSubscriptionEmailPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionEmailPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related twSubscriptionList object
     *
     * @param   twSubscriptionList|PropelObjectCollection $twSubscriptionList The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionEmailQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionList($twSubscriptionList, $comparison = null)
    {
        if ($twSubscriptionList instanceof twSubscriptionList) {
            return $this
                ->addUsingAlias(twSubscriptionEmailPeer::LIST_ID, $twSubscriptionList->getId(), $comparison);
        } elseif ($twSubscriptionList instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionEmailPeer::LIST_ID, $twSubscriptionList->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionList() only accepts arguments of type twSubscriptionList or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionList relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function jointwSubscriptionList($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionList');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionList');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionList relation twSubscriptionList object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionListQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionListQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionList($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionList', 'twSubscriptionListQuery');
    }

    /**
     * Filter the query by a related twSubscriptionStatus object
     *
     * @param   twSubscriptionStatus|PropelObjectCollection $twSubscriptionStatus The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionEmailQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionStatus($twSubscriptionStatus, $comparison = null)
    {
        if ($twSubscriptionStatus instanceof twSubscriptionStatus) {
            return $this
                ->addUsingAlias(twSubscriptionEmailPeer::STATUS_ID, $twSubscriptionStatus->getId(), $comparison);
        } elseif ($twSubscriptionStatus instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionEmailPeer::STATUS_ID, $twSubscriptionStatus->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionStatus() only accepts arguments of type twSubscriptionStatus or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionStatus relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function jointwSubscriptionStatus($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionStatus');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionStatus');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionStatus relation twSubscriptionStatus object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionStatusQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionStatusQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionStatus($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionStatus', 'twSubscriptionStatusQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   twSubscriptionEmail $twSubscriptionEmail Object to remove from the list of results
     *
     * @return twSubscriptionEmailQuery The current query, for fluid interface
     */
    public function prune($twSubscriptionEmail = null)
    {
        if ($twSubscriptionEmail) {
            $this->addUsingAlias(twSubscriptionEmailPeer::ID, $twSubscriptionEmail->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

} // BasetwSubscriptionEmailQuery