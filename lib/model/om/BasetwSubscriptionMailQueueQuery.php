<?php


/**
 * Base class that represents a query for the 'tw_subscription_mail_queue' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 * @method     twSubscriptionMailQueueQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twSubscriptionMailQueueQuery orderByMailingId($order = Criteria::ASC) Order by the mailing_id column
 * @method     twSubscriptionMailQueueQuery orderByMessageId($order = Criteria::ASC) Order by the message_id column
 * @method     twSubscriptionMailQueueQuery orderByTypeId($order = Criteria::ASC) Order by the type_id column
 * @method     twSubscriptionMailQueueQuery orderBySubject($order = Criteria::ASC) Order by the subject column
 * @method     twSubscriptionMailQueueQuery orderByMessage($order = Criteria::ASC) Order by the message column
 * @method     twSubscriptionMailQueueQuery orderByListId($order = Criteria::ASC) Order by the list_id column
 * @method     twSubscriptionMailQueueQuery orderByFromname($order = Criteria::ASC) Order by the fromname column
 * @method     twSubscriptionMailQueueQuery orderByMailfrom($order = Criteria::ASC) Order by the mailfrom column
 * @method     twSubscriptionMailQueueQuery orderBySmtphost($order = Criteria::ASC) Order by the smtphost column
 * @method     twSubscriptionMailQueueQuery orderBySmtpuser($order = Criteria::ASC) Order by the smtpuser column
 * @method     twSubscriptionMailQueueQuery orderBySmtppass($order = Criteria::ASC) Order by the smtppass column
 * @method     twSubscriptionMailQueueQuery orderBySubscriptionBaseUrl($order = Criteria::ASC) Order by the subscription_base_url column
 * @method     twSubscriptionMailQueueQuery orderByWebsiteBaseUrl($order = Criteria::ASC) Order by the website_base_url column
 * @method     twSubscriptionMailQueueQuery orderByRemail($order = Criteria::ASC) Order by the remail column
 * @method     twSubscriptionMailQueueQuery orderByRname($order = Criteria::ASC) Order by the rname column
 * @method     twSubscriptionMailQueueQuery orderByUnsubscribe($order = Criteria::ASC) Order by the unsubscribe column
 * @method     twSubscriptionMailQueueQuery orderByUnsublink($order = Criteria::ASC) Order by the unsublink column
 * @method     twSubscriptionMailQueueQuery orderByTimeToSend($order = Criteria::ASC) Order by the time_to_send column
 * @method     twSubscriptionMailQueueQuery orderByTrySent($order = Criteria::ASC) Order by the try_sent column
 * @method     twSubscriptionMailQueueQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method     twSubscriptionMailQueueQuery groupById() Group by the id column
 * @method     twSubscriptionMailQueueQuery groupByMailingId() Group by the mailing_id column
 * @method     twSubscriptionMailQueueQuery groupByMessageId() Group by the message_id column
 * @method     twSubscriptionMailQueueQuery groupByTypeId() Group by the type_id column
 * @method     twSubscriptionMailQueueQuery groupBySubject() Group by the subject column
 * @method     twSubscriptionMailQueueQuery groupByMessage() Group by the message column
 * @method     twSubscriptionMailQueueQuery groupByListId() Group by the list_id column
 * @method     twSubscriptionMailQueueQuery groupByFromname() Group by the fromname column
 * @method     twSubscriptionMailQueueQuery groupByMailfrom() Group by the mailfrom column
 * @method     twSubscriptionMailQueueQuery groupBySmtphost() Group by the smtphost column
 * @method     twSubscriptionMailQueueQuery groupBySmtpuser() Group by the smtpuser column
 * @method     twSubscriptionMailQueueQuery groupBySmtppass() Group by the smtppass column
 * @method     twSubscriptionMailQueueQuery groupBySubscriptionBaseUrl() Group by the subscription_base_url column
 * @method     twSubscriptionMailQueueQuery groupByWebsiteBaseUrl() Group by the website_base_url column
 * @method     twSubscriptionMailQueueQuery groupByRemail() Group by the remail column
 * @method     twSubscriptionMailQueueQuery groupByRname() Group by the rname column
 * @method     twSubscriptionMailQueueQuery groupByUnsubscribe() Group by the unsubscribe column
 * @method     twSubscriptionMailQueueQuery groupByUnsublink() Group by the unsublink column
 * @method     twSubscriptionMailQueueQuery groupByTimeToSend() Group by the time_to_send column
 * @method     twSubscriptionMailQueueQuery groupByTrySent() Group by the try_sent column
 * @method     twSubscriptionMailQueueQuery groupByCreatedAt() Group by the created_at column
 *
 * @method     twSubscriptionMailQueueQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twSubscriptionMailQueueQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twSubscriptionMailQueueQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twSubscriptionMailQueueQuery leftJointwSubscriptionMailing($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMailing relation
 * @method     twSubscriptionMailQueueQuery rightJointwSubscriptionMailing($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMailing relation
 * @method     twSubscriptionMailQueueQuery innerJointwSubscriptionMailing($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMailing relation
 *
 * @method     twSubscriptionMailQueueQuery leftJointwSubscriptionMessage($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMessage relation
 * @method     twSubscriptionMailQueueQuery rightJointwSubscriptionMessage($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMessage relation
 * @method     twSubscriptionMailQueueQuery innerJointwSubscriptionMessage($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMessage relation
 *
 * @method     twSubscriptionMailQueueQuery leftJointwSubscriptionMessageType($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMessageType relation
 * @method     twSubscriptionMailQueueQuery rightJointwSubscriptionMessageType($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMessageType relation
 * @method     twSubscriptionMailQueueQuery innerJointwSubscriptionMessageType($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMessageType relation
 *
 * @method     twSubscriptionMailQueueQuery leftJointwSubscriptionList($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionMailQueueQuery rightJointwSubscriptionList($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionList relation
 * @method     twSubscriptionMailQueueQuery innerJointwSubscriptionList($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionList relation
 *
 * @method     twSubscriptionMailQueue findOne(PropelPDO $con = null) Return the first twSubscriptionMailQueue matching the query
 * @method     twSubscriptionMailQueue findOneOrCreate(PropelPDO $con = null) Return the first twSubscriptionMailQueue matching the query, or a new twSubscriptionMailQueue object populated from the query conditions when no match is found
 *
 * @method     twSubscriptionMailQueue findOneById(int $id) Return the first twSubscriptionMailQueue filtered by the id column
 * @method     twSubscriptionMailQueue findOneByMailingId(int $mailing_id) Return the first twSubscriptionMailQueue filtered by the mailing_id column
 * @method     twSubscriptionMailQueue findOneByMessageId(int $message_id) Return the first twSubscriptionMailQueue filtered by the message_id column
 * @method     twSubscriptionMailQueue findOneByTypeId(int $type_id) Return the first twSubscriptionMailQueue filtered by the type_id column
 * @method     twSubscriptionMailQueue findOneBySubject(string $subject) Return the first twSubscriptionMailQueue filtered by the subject column
 * @method     twSubscriptionMailQueue findOneByMessage(string $message) Return the first twSubscriptionMailQueue filtered by the message column
 * @method     twSubscriptionMailQueue findOneByListId(int $list_id) Return the first twSubscriptionMailQueue filtered by the list_id column
 * @method     twSubscriptionMailQueue findOneByFromname(string $fromname) Return the first twSubscriptionMailQueue filtered by the fromname column
 * @method     twSubscriptionMailQueue findOneByMailfrom(string $mailfrom) Return the first twSubscriptionMailQueue filtered by the mailfrom column
 * @method     twSubscriptionMailQueue findOneBySmtphost(string $smtphost) Return the first twSubscriptionMailQueue filtered by the smtphost column
 * @method     twSubscriptionMailQueue findOneBySmtpuser(string $smtpuser) Return the first twSubscriptionMailQueue filtered by the smtpuser column
 * @method     twSubscriptionMailQueue findOneBySmtppass(string $smtppass) Return the first twSubscriptionMailQueue filtered by the smtppass column
 * @method     twSubscriptionMailQueue findOneBySubscriptionBaseUrl(string $subscription_base_url) Return the first twSubscriptionMailQueue filtered by the subscription_base_url column
 * @method     twSubscriptionMailQueue findOneByWebsiteBaseUrl(string $website_base_url) Return the first twSubscriptionMailQueue filtered by the website_base_url column
 * @method     twSubscriptionMailQueue findOneByRemail(string $remail) Return the first twSubscriptionMailQueue filtered by the remail column
 * @method     twSubscriptionMailQueue findOneByRname(string $rname) Return the first twSubscriptionMailQueue filtered by the rname column
 * @method     twSubscriptionMailQueue findOneByUnsubscribe(string $unsubscribe) Return the first twSubscriptionMailQueue filtered by the unsubscribe column
 * @method     twSubscriptionMailQueue findOneByUnsublink(string $unsublink) Return the first twSubscriptionMailQueue filtered by the unsublink column
 * @method     twSubscriptionMailQueue findOneByTimeToSend(string $time_to_send) Return the first twSubscriptionMailQueue filtered by the time_to_send column
 * @method     twSubscriptionMailQueue findOneByTrySent(int $try_sent) Return the first twSubscriptionMailQueue filtered by the try_sent column
 * @method     twSubscriptionMailQueue findOneByCreatedAt(string $created_at) Return the first twSubscriptionMailQueue filtered by the created_at column
 *
 * @method     array findById(int $id) Return twSubscriptionMailQueue objects filtered by the id column
 * @method     array findByMailingId(int $mailing_id) Return twSubscriptionMailQueue objects filtered by the mailing_id column
 * @method     array findByMessageId(int $message_id) Return twSubscriptionMailQueue objects filtered by the message_id column
 * @method     array findByTypeId(int $type_id) Return twSubscriptionMailQueue objects filtered by the type_id column
 * @method     array findBySubject(string $subject) Return twSubscriptionMailQueue objects filtered by the subject column
 * @method     array findByMessage(string $message) Return twSubscriptionMailQueue objects filtered by the message column
 * @method     array findByListId(int $list_id) Return twSubscriptionMailQueue objects filtered by the list_id column
 * @method     array findByFromname(string $fromname) Return twSubscriptionMailQueue objects filtered by the fromname column
 * @method     array findByMailfrom(string $mailfrom) Return twSubscriptionMailQueue objects filtered by the mailfrom column
 * @method     array findBySmtphost(string $smtphost) Return twSubscriptionMailQueue objects filtered by the smtphost column
 * @method     array findBySmtpuser(string $smtpuser) Return twSubscriptionMailQueue objects filtered by the smtpuser column
 * @method     array findBySmtppass(string $smtppass) Return twSubscriptionMailQueue objects filtered by the smtppass column
 * @method     array findBySubscriptionBaseUrl(string $subscription_base_url) Return twSubscriptionMailQueue objects filtered by the subscription_base_url column
 * @method     array findByWebsiteBaseUrl(string $website_base_url) Return twSubscriptionMailQueue objects filtered by the website_base_url column
 * @method     array findByRemail(string $remail) Return twSubscriptionMailQueue objects filtered by the remail column
 * @method     array findByRname(string $rname) Return twSubscriptionMailQueue objects filtered by the rname column
 * @method     array findByUnsubscribe(string $unsubscribe) Return twSubscriptionMailQueue objects filtered by the unsubscribe column
 * @method     array findByUnsublink(string $unsublink) Return twSubscriptionMailQueue objects filtered by the unsublink column
 * @method     array findByTimeToSend(string $time_to_send) Return twSubscriptionMailQueue objects filtered by the time_to_send column
 * @method     array findByTrySent(int $try_sent) Return twSubscriptionMailQueue objects filtered by the try_sent column
 * @method     array findByCreatedAt(string $created_at) Return twSubscriptionMailQueue objects filtered by the created_at column
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.om
 */
abstract class BasetwSubscriptionMailQueueQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BasetwSubscriptionMailQueueQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'twSubscriptionMailQueue', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new twSubscriptionMailQueueQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     twSubscriptionMailQueueQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return twSubscriptionMailQueueQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof twSubscriptionMailQueueQuery) {
            return $criteria;
        }
        $query = new twSubscriptionMailQueueQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   twSubscriptionMailQueue|twSubscriptionMailQueue[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = twSubscriptionMailQueuePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionMailQueuePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   twSubscriptionMailQueue A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `MAILING_ID`, `MESSAGE_ID`, `TYPE_ID`, `SUBJECT`, `MESSAGE`, `LIST_ID`, `FROMNAME`, `MAILFROM`, `SMTPHOST`, `SMTPUSER`, `SMTPPASS`, `SUBSCRIPTION_BASE_URL`, `WEBSITE_BASE_URL`, `REMAIL`, `RNAME`, `UNSUBSCRIBE`, `UNSUBLINK`, `TIME_TO_SEND`, `TRY_SENT`, `CREATED_AT` FROM `tw_subscription_mail_queue` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new twSubscriptionMailQueue();
            $obj->hydrate($row);
            twSubscriptionMailQueuePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return twSubscriptionMailQueue|twSubscriptionMailQueue[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|twSubscriptionMailQueue[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the mailing_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMailingId(1234); // WHERE mailing_id = 1234
     * $query->filterByMailingId(array(12, 34)); // WHERE mailing_id IN (12, 34)
     * $query->filterByMailingId(array('min' => 12)); // WHERE mailing_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionMailing()
     *
     * @param     mixed $mailingId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByMailingId($mailingId = null, $comparison = null)
    {
        if (is_array($mailingId)) {
            $useMinMax = false;
            if (isset($mailingId['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::MAILING_ID, $mailingId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mailingId['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::MAILING_ID, $mailingId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::MAILING_ID, $mailingId, $comparison);
    }

    /**
     * Filter the query on the message_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMessageId(1234); // WHERE message_id = 1234
     * $query->filterByMessageId(array(12, 34)); // WHERE message_id IN (12, 34)
     * $query->filterByMessageId(array('min' => 12)); // WHERE message_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionMessage()
     *
     * @param     mixed $messageId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByMessageId($messageId = null, $comparison = null)
    {
        if (is_array($messageId)) {
            $useMinMax = false;
            if (isset($messageId['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE_ID, $messageId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($messageId['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE_ID, $messageId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE_ID, $messageId, $comparison);
    }

    /**
     * Filter the query on the type_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTypeId(1234); // WHERE type_id = 1234
     * $query->filterByTypeId(array(12, 34)); // WHERE type_id IN (12, 34)
     * $query->filterByTypeId(array('min' => 12)); // WHERE type_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionMessageType()
     *
     * @param     mixed $typeId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByTypeId($typeId = null, $comparison = null)
    {
        if (is_array($typeId)) {
            $useMinMax = false;
            if (isset($typeId['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TYPE_ID, $typeId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($typeId['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TYPE_ID, $typeId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::TYPE_ID, $typeId, $comparison);
    }

    /**
     * Filter the query on the subject column
     *
     * Example usage:
     * <code>
     * $query->filterBySubject('fooValue');   // WHERE subject = 'fooValue'
     * $query->filterBySubject('%fooValue%'); // WHERE subject LIKE '%fooValue%'
     * </code>
     *
     * @param     string $subject The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterBySubject($subject = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($subject)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $subject)) {
                $subject = str_replace('*', '%', $subject);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::SUBJECT, $subject, $comparison);
    }

    /**
     * Filter the query on the message column
     *
     * Example usage:
     * <code>
     * $query->filterByMessage('fooValue');   // WHERE message = 'fooValue'
     * $query->filterByMessage('%fooValue%'); // WHERE message LIKE '%fooValue%'
     * </code>
     *
     * @param     string $message The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByMessage($message = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($message)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $message)) {
                $message = str_replace('*', '%', $message);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE, $message, $comparison);
    }

    /**
     * Filter the query on the list_id column
     *
     * Example usage:
     * <code>
     * $query->filterByListId(1234); // WHERE list_id = 1234
     * $query->filterByListId(array(12, 34)); // WHERE list_id IN (12, 34)
     * $query->filterByListId(array('min' => 12)); // WHERE list_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionList()
     *
     * @param     mixed $listId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByListId($listId = null, $comparison = null)
    {
        if (is_array($listId)) {
            $useMinMax = false;
            if (isset($listId['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::LIST_ID, $listId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($listId['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::LIST_ID, $listId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::LIST_ID, $listId, $comparison);
    }

    /**
     * Filter the query on the fromname column
     *
     * Example usage:
     * <code>
     * $query->filterByFromname('fooValue');   // WHERE fromname = 'fooValue'
     * $query->filterByFromname('%fooValue%'); // WHERE fromname LIKE '%fooValue%'
     * </code>
     *
     * @param     string $fromname The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByFromname($fromname = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($fromname)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $fromname)) {
                $fromname = str_replace('*', '%', $fromname);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::FROMNAME, $fromname, $comparison);
    }

    /**
     * Filter the query on the mailfrom column
     *
     * Example usage:
     * <code>
     * $query->filterByMailfrom('fooValue');   // WHERE mailfrom = 'fooValue'
     * $query->filterByMailfrom('%fooValue%'); // WHERE mailfrom LIKE '%fooValue%'
     * </code>
     *
     * @param     string $mailfrom The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByMailfrom($mailfrom = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($mailfrom)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $mailfrom)) {
                $mailfrom = str_replace('*', '%', $mailfrom);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::MAILFROM, $mailfrom, $comparison);
    }

    /**
     * Filter the query on the smtphost column
     *
     * Example usage:
     * <code>
     * $query->filterBySmtphost('fooValue');   // WHERE smtphost = 'fooValue'
     * $query->filterBySmtphost('%fooValue%'); // WHERE smtphost LIKE '%fooValue%'
     * </code>
     *
     * @param     string $smtphost The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterBySmtphost($smtphost = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($smtphost)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $smtphost)) {
                $smtphost = str_replace('*', '%', $smtphost);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::SMTPHOST, $smtphost, $comparison);
    }

    /**
     * Filter the query on the smtpuser column
     *
     * Example usage:
     * <code>
     * $query->filterBySmtpuser('fooValue');   // WHERE smtpuser = 'fooValue'
     * $query->filterBySmtpuser('%fooValue%'); // WHERE smtpuser LIKE '%fooValue%'
     * </code>
     *
     * @param     string $smtpuser The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterBySmtpuser($smtpuser = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($smtpuser)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $smtpuser)) {
                $smtpuser = str_replace('*', '%', $smtpuser);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::SMTPUSER, $smtpuser, $comparison);
    }

    /**
     * Filter the query on the smtppass column
     *
     * Example usage:
     * <code>
     * $query->filterBySmtppass('fooValue');   // WHERE smtppass = 'fooValue'
     * $query->filterBySmtppass('%fooValue%'); // WHERE smtppass LIKE '%fooValue%'
     * </code>
     *
     * @param     string $smtppass The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterBySmtppass($smtppass = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($smtppass)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $smtppass)) {
                $smtppass = str_replace('*', '%', $smtppass);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::SMTPPASS, $smtppass, $comparison);
    }

    /**
     * Filter the query on the subscription_base_url column
     *
     * Example usage:
     * <code>
     * $query->filterBySubscriptionBaseUrl('fooValue');   // WHERE subscription_base_url = 'fooValue'
     * $query->filterBySubscriptionBaseUrl('%fooValue%'); // WHERE subscription_base_url LIKE '%fooValue%'
     * </code>
     *
     * @param     string $subscriptionBaseUrl The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterBySubscriptionBaseUrl($subscriptionBaseUrl = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($subscriptionBaseUrl)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $subscriptionBaseUrl)) {
                $subscriptionBaseUrl = str_replace('*', '%', $subscriptionBaseUrl);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::SUBSCRIPTION_BASE_URL, $subscriptionBaseUrl, $comparison);
    }

    /**
     * Filter the query on the website_base_url column
     *
     * Example usage:
     * <code>
     * $query->filterByWebsiteBaseUrl('fooValue');   // WHERE website_base_url = 'fooValue'
     * $query->filterByWebsiteBaseUrl('%fooValue%'); // WHERE website_base_url LIKE '%fooValue%'
     * </code>
     *
     * @param     string $websiteBaseUrl The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByWebsiteBaseUrl($websiteBaseUrl = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($websiteBaseUrl)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $websiteBaseUrl)) {
                $websiteBaseUrl = str_replace('*', '%', $websiteBaseUrl);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::WEBSITE_BASE_URL, $websiteBaseUrl, $comparison);
    }

    /**
     * Filter the query on the remail column
     *
     * Example usage:
     * <code>
     * $query->filterByRemail('fooValue');   // WHERE remail = 'fooValue'
     * $query->filterByRemail('%fooValue%'); // WHERE remail LIKE '%fooValue%'
     * </code>
     *
     * @param     string $remail The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByRemail($remail = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($remail)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $remail)) {
                $remail = str_replace('*', '%', $remail);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::REMAIL, $remail, $comparison);
    }

    /**
     * Filter the query on the rname column
     *
     * Example usage:
     * <code>
     * $query->filterByRname('fooValue');   // WHERE rname = 'fooValue'
     * $query->filterByRname('%fooValue%'); // WHERE rname LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rname The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByRname($rname = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rname)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rname)) {
                $rname = str_replace('*', '%', $rname);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::RNAME, $rname, $comparison);
    }

    /**
     * Filter the query on the unsubscribe column
     *
     * Example usage:
     * <code>
     * $query->filterByUnsubscribe('fooValue');   // WHERE unsubscribe = 'fooValue'
     * $query->filterByUnsubscribe('%fooValue%'); // WHERE unsubscribe LIKE '%fooValue%'
     * </code>
     *
     * @param     string $unsubscribe The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByUnsubscribe($unsubscribe = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($unsubscribe)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $unsubscribe)) {
                $unsubscribe = str_replace('*', '%', $unsubscribe);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::UNSUBSCRIBE, $unsubscribe, $comparison);
    }

    /**
     * Filter the query on the unsublink column
     *
     * Example usage:
     * <code>
     * $query->filterByUnsublink('fooValue');   // WHERE unsublink = 'fooValue'
     * $query->filterByUnsublink('%fooValue%'); // WHERE unsublink LIKE '%fooValue%'
     * </code>
     *
     * @param     string $unsublink The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByUnsublink($unsublink = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($unsublink)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $unsublink)) {
                $unsublink = str_replace('*', '%', $unsublink);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::UNSUBLINK, $unsublink, $comparison);
    }

    /**
     * Filter the query on the time_to_send column
     *
     * Example usage:
     * <code>
     * $query->filterByTimeToSend('2011-03-14'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend('now'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend(array('max' => 'yesterday')); // WHERE time_to_send > '2011-03-13'
     * </code>
     *
     * @param     mixed $timeToSend The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByTimeToSend($timeToSend = null, $comparison = null)
    {
        if (is_array($timeToSend)) {
            $useMinMax = false;
            if (isset($timeToSend['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TIME_TO_SEND, $timeToSend['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($timeToSend['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TIME_TO_SEND, $timeToSend['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::TIME_TO_SEND, $timeToSend, $comparison);
    }

    /**
     * Filter the query on the try_sent column
     *
     * Example usage:
     * <code>
     * $query->filterByTrySent(1234); // WHERE try_sent = 1234
     * $query->filterByTrySent(array(12, 34)); // WHERE try_sent IN (12, 34)
     * $query->filterByTrySent(array('min' => 12)); // WHERE try_sent > 12
     * </code>
     *
     * @param     mixed $trySent The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByTrySent($trySent = null, $comparison = null)
    {
        if (is_array($trySent)) {
            $useMinMax = false;
            if (isset($trySent['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TRY_SENT, $trySent['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($trySent['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::TRY_SENT, $trySent['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::TRY_SENT, $trySent, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(twSubscriptionMailQueuePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailQueuePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related twSubscriptionMailing object
     *
     * @param   twSubscriptionMailing|PropelObjectCollection $twSubscriptionMailing The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailQueueQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMailing($twSubscriptionMailing, $comparison = null)
    {
        if ($twSubscriptionMailing instanceof twSubscriptionMailing) {
            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::MAILING_ID, $twSubscriptionMailing->getId(), $comparison);
        } elseif ($twSubscriptionMailing instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::MAILING_ID, $twSubscriptionMailing->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionMailing() only accepts arguments of type twSubscriptionMailing or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMailing relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMailing($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMailing');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMailing');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMailing relation twSubscriptionMailing object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMailingQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMailingQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMailing($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMailing', 'twSubscriptionMailingQuery');
    }

    /**
     * Filter the query by a related twSubscriptionMessage object
     *
     * @param   twSubscriptionMessage|PropelObjectCollection $twSubscriptionMessage The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailQueueQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMessage($twSubscriptionMessage, $comparison = null)
    {
        if ($twSubscriptionMessage instanceof twSubscriptionMessage) {
            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE_ID, $twSubscriptionMessage->getId(), $comparison);
        } elseif ($twSubscriptionMessage instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::MESSAGE_ID, $twSubscriptionMessage->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionMessage() only accepts arguments of type twSubscriptionMessage or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMessage relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMessage($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMessage');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMessage');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMessage relation twSubscriptionMessage object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMessageQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMessageQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMessage($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMessage', 'twSubscriptionMessageQuery');
    }

    /**
     * Filter the query by a related twSubscriptionMessageType object
     *
     * @param   twSubscriptionMessageType|PropelObjectCollection $twSubscriptionMessageType The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailQueueQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMessageType($twSubscriptionMessageType, $comparison = null)
    {
        if ($twSubscriptionMessageType instanceof twSubscriptionMessageType) {
            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::TYPE_ID, $twSubscriptionMessageType->getId(), $comparison);
        } elseif ($twSubscriptionMessageType instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::TYPE_ID, $twSubscriptionMessageType->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionMessageType() only accepts arguments of type twSubscriptionMessageType or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMessageType relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMessageType($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMessageType');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMessageType');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMessageType relation twSubscriptionMessageType object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMessageTypeQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMessageTypeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMessageType($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMessageType', 'twSubscriptionMessageTypeQuery');
    }

    /**
     * Filter the query by a related twSubscriptionList object
     *
     * @param   twSubscriptionList|PropelObjectCollection $twSubscriptionList The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailQueueQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionList($twSubscriptionList, $comparison = null)
    {
        if ($twSubscriptionList instanceof twSubscriptionList) {
            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::LIST_ID, $twSubscriptionList->getId(), $comparison);
        } elseif ($twSubscriptionList instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailQueuePeer::LIST_ID, $twSubscriptionList->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionList() only accepts arguments of type twSubscriptionList or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionList relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function jointwSubscriptionList($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionList');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionList');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionList relation twSubscriptionList object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionListQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionListQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionList($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionList', 'twSubscriptionListQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   twSubscriptionMailQueue $twSubscriptionMailQueue Object to remove from the list of results
     *
     * @return twSubscriptionMailQueueQuery The current query, for fluid interface
     */
    public function prune($twSubscriptionMailQueue = null)
    {
        if ($twSubscriptionMailQueue) {
            $this->addUsingAlias(twSubscriptionMailQueuePeer::ID, $twSubscriptionMailQueue->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

} // BasetwSubscriptionMailQueueQuery