<?php


/**
 * Base class that represents a query for the 'tw_subscription_mail_sent' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 * @method     twSubscriptionMailSentQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     twSubscriptionMailSentQuery orderByMailingId($order = Criteria::ASC) Order by the mailing_id column
 * @method     twSubscriptionMailSentQuery orderByTimeToSend($order = Criteria::ASC) Order by the time_to_send column
 * @method     twSubscriptionMailSentQuery orderBySender($order = Criteria::ASC) Order by the sender column
 * @method     twSubscriptionMailSentQuery orderByRemail($order = Criteria::ASC) Order by the remail column
 * @method     twSubscriptionMailSentQuery orderByBody($order = Criteria::ASC) Order by the body column
 * @method     twSubscriptionMailSentQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method     twSubscriptionMailSentQuery groupById() Group by the id column
 * @method     twSubscriptionMailSentQuery groupByMailingId() Group by the mailing_id column
 * @method     twSubscriptionMailSentQuery groupByTimeToSend() Group by the time_to_send column
 * @method     twSubscriptionMailSentQuery groupBySender() Group by the sender column
 * @method     twSubscriptionMailSentQuery groupByRemail() Group by the remail column
 * @method     twSubscriptionMailSentQuery groupByBody() Group by the body column
 * @method     twSubscriptionMailSentQuery groupByCreatedAt() Group by the created_at column
 *
 * @method     twSubscriptionMailSentQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     twSubscriptionMailSentQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     twSubscriptionMailSentQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     twSubscriptionMailSentQuery leftJointwSubscriptionMailing($relationAlias = null) Adds a LEFT JOIN clause to the query using the twSubscriptionMailing relation
 * @method     twSubscriptionMailSentQuery rightJointwSubscriptionMailing($relationAlias = null) Adds a RIGHT JOIN clause to the query using the twSubscriptionMailing relation
 * @method     twSubscriptionMailSentQuery innerJointwSubscriptionMailing($relationAlias = null) Adds a INNER JOIN clause to the query using the twSubscriptionMailing relation
 *
 * @method     twSubscriptionMailSent findOne(PropelPDO $con = null) Return the first twSubscriptionMailSent matching the query
 * @method     twSubscriptionMailSent findOneOrCreate(PropelPDO $con = null) Return the first twSubscriptionMailSent matching the query, or a new twSubscriptionMailSent object populated from the query conditions when no match is found
 *
 * @method     twSubscriptionMailSent findOneById(int $id) Return the first twSubscriptionMailSent filtered by the id column
 * @method     twSubscriptionMailSent findOneByMailingId(int $mailing_id) Return the first twSubscriptionMailSent filtered by the mailing_id column
 * @method     twSubscriptionMailSent findOneByTimeToSend(string $time_to_send) Return the first twSubscriptionMailSent filtered by the time_to_send column
 * @method     twSubscriptionMailSent findOneBySender(string $sender) Return the first twSubscriptionMailSent filtered by the sender column
 * @method     twSubscriptionMailSent findOneByRemail(string $remail) Return the first twSubscriptionMailSent filtered by the remail column
 * @method     twSubscriptionMailSent findOneByBody(string $body) Return the first twSubscriptionMailSent filtered by the body column
 * @method     twSubscriptionMailSent findOneByCreatedAt(string $created_at) Return the first twSubscriptionMailSent filtered by the created_at column
 *
 * @method     array findById(int $id) Return twSubscriptionMailSent objects filtered by the id column
 * @method     array findByMailingId(int $mailing_id) Return twSubscriptionMailSent objects filtered by the mailing_id column
 * @method     array findByTimeToSend(string $time_to_send) Return twSubscriptionMailSent objects filtered by the time_to_send column
 * @method     array findBySender(string $sender) Return twSubscriptionMailSent objects filtered by the sender column
 * @method     array findByRemail(string $remail) Return twSubscriptionMailSent objects filtered by the remail column
 * @method     array findByBody(string $body) Return twSubscriptionMailSent objects filtered by the body column
 * @method     array findByCreatedAt(string $created_at) Return twSubscriptionMailSent objects filtered by the created_at column
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.om
 */
abstract class BasetwSubscriptionMailSentQuery extends ModelCriteria
{
    
    /**
     * Initializes internal state of BasetwSubscriptionMailSentQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'twSubscriptionMailSent', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new twSubscriptionMailSentQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     twSubscriptionMailSentQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return twSubscriptionMailSentQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof twSubscriptionMailSentQuery) {
            return $criteria;
        }
        $query = new twSubscriptionMailSentQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   twSubscriptionMailSent|twSubscriptionMailSent[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = twSubscriptionMailSentPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionMailSentPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   twSubscriptionMailSent A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `MAILING_ID`, `TIME_TO_SEND`, `SENDER`, `REMAIL`, `BODY`, `CREATED_AT` FROM `tw_subscription_mail_sent` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new twSubscriptionMailSent();
            $obj->hydrate($row);
            twSubscriptionMailSentPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return twSubscriptionMailSent|twSubscriptionMailSent[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|twSubscriptionMailSent[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(twSubscriptionMailSentPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(twSubscriptionMailSentPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the mailing_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMailingId(1234); // WHERE mailing_id = 1234
     * $query->filterByMailingId(array(12, 34)); // WHERE mailing_id IN (12, 34)
     * $query->filterByMailingId(array('min' => 12)); // WHERE mailing_id > 12
     * </code>
     *
     * @see       filterBytwSubscriptionMailing()
     *
     * @param     mixed $mailingId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByMailingId($mailingId = null, $comparison = null)
    {
        if (is_array($mailingId)) {
            $useMinMax = false;
            if (isset($mailingId['min'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::MAILING_ID, $mailingId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mailingId['max'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::MAILING_ID, $mailingId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::MAILING_ID, $mailingId, $comparison);
    }

    /**
     * Filter the query on the time_to_send column
     *
     * Example usage:
     * <code>
     * $query->filterByTimeToSend('2011-03-14'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend('now'); // WHERE time_to_send = '2011-03-14'
     * $query->filterByTimeToSend(array('max' => 'yesterday')); // WHERE time_to_send > '2011-03-13'
     * </code>
     *
     * @param     mixed $timeToSend The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByTimeToSend($timeToSend = null, $comparison = null)
    {
        if (is_array($timeToSend)) {
            $useMinMax = false;
            if (isset($timeToSend['min'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::TIME_TO_SEND, $timeToSend['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($timeToSend['max'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::TIME_TO_SEND, $timeToSend['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::TIME_TO_SEND, $timeToSend, $comparison);
    }

    /**
     * Filter the query on the sender column
     *
     * Example usage:
     * <code>
     * $query->filterBySender('fooValue');   // WHERE sender = 'fooValue'
     * $query->filterBySender('%fooValue%'); // WHERE sender LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sender The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterBySender($sender = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sender)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sender)) {
                $sender = str_replace('*', '%', $sender);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::SENDER, $sender, $comparison);
    }

    /**
     * Filter the query on the remail column
     *
     * Example usage:
     * <code>
     * $query->filterByRemail('fooValue');   // WHERE remail = 'fooValue'
     * $query->filterByRemail('%fooValue%'); // WHERE remail LIKE '%fooValue%'
     * </code>
     *
     * @param     string $remail The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByRemail($remail = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($remail)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $remail)) {
                $remail = str_replace('*', '%', $remail);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::REMAIL, $remail, $comparison);
    }

    /**
     * Filter the query on the body column
     *
     * Example usage:
     * <code>
     * $query->filterByBody('fooValue');   // WHERE body = 'fooValue'
     * $query->filterByBody('%fooValue%'); // WHERE body LIKE '%fooValue%'
     * </code>
     *
     * @param     string $body The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByBody($body = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($body)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $body)) {
                $body = str_replace('*', '%', $body);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::BODY, $body, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(twSubscriptionMailSentPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(twSubscriptionMailSentPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related twSubscriptionMailing object
     *
     * @param   twSubscriptionMailing|PropelObjectCollection $twSubscriptionMailing The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   twSubscriptionMailSentQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBytwSubscriptionMailing($twSubscriptionMailing, $comparison = null)
    {
        if ($twSubscriptionMailing instanceof twSubscriptionMailing) {
            return $this
                ->addUsingAlias(twSubscriptionMailSentPeer::MAILING_ID, $twSubscriptionMailing->getId(), $comparison);
        } elseif ($twSubscriptionMailing instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(twSubscriptionMailSentPeer::MAILING_ID, $twSubscriptionMailing->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBytwSubscriptionMailing() only accepts arguments of type twSubscriptionMailing or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the twSubscriptionMailing relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function jointwSubscriptionMailing($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('twSubscriptionMailing');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'twSubscriptionMailing');
        }

        return $this;
    }

    /**
     * Use the twSubscriptionMailing relation twSubscriptionMailing object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   twSubscriptionMailingQuery A secondary query class using the current class as primary query
     */
    public function usetwSubscriptionMailingQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->jointwSubscriptionMailing($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'twSubscriptionMailing', 'twSubscriptionMailingQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   twSubscriptionMailSent $twSubscriptionMailSent Object to remove from the list of results
     *
     * @return twSubscriptionMailSentQuery The current query, for fluid interface
     */
    public function prune($twSubscriptionMailSent = null)
    {
        if ($twSubscriptionMailSent) {
            $this->addUsingAlias(twSubscriptionMailSentPeer::ID, $twSubscriptionMailSent->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

} // BasetwSubscriptionMailSentQuery