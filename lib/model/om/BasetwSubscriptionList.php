<?php


/**
 * Base class that represents a row from the 'tw_subscription_list' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6 on:
 *
 * Thu Sep 27 23:40:08 2012
 *
 * @package    propel.generator.plugins.twSubscriptionPlugin.lib.model.om
 */
abstract class BasetwSubscriptionList extends BaseObject 
{

    /**
     * Peer class name
     */
    const PEER = 'twSubscriptionListPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        twSubscriptionListPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the type_id field.
     * @var        int
     */
    protected $type_id;

    /**
     * The value for the template_id field.
     * @var        int
     */
    protected $template_id;

    /**
     * The value for the listname field.
     * @var        string
     */
    protected $listname;

    /**
     * The value for the listdesc field.
     * @var        string
     */
    protected $listdesc;

    /**
     * The value for the fromname field.
     * @var        string
     */
    protected $fromname;

    /**
     * The value for the mailfrom field.
     * @var        string
     */
    protected $mailfrom;

    /**
     * The value for the smtphost field.
     * @var        string
     */
    protected $smtphost;

    /**
     * The value for the smtpport field.
     * @var        int
     */
    protected $smtpport;

    /**
     * The value for the smtpencr field.
     * @var        int
     */
    protected $smtpencr;

    /**
     * The value for the smtpuser field.
     * @var        string
     */
    protected $smtpuser;

    /**
     * The value for the smtppass field.
     * @var        string
     */
    protected $smtppass;

    /**
     * The value for the website_base_url field.
     * @var        string
     */
    protected $website_base_url;

    /**
     * The value for the website_shared_key field.
     * @var        string
     */
    protected $website_shared_key;

    /**
     * The value for the lastsync_at field.
     * @var        string
     */
    protected $lastsync_at;

    /**
     * @var        twSubscriptionListType
     */
    protected $atwSubscriptionListType;

    /**
     * @var        twSubscriptionTemplate
     */
    protected $atwSubscriptionTemplate;

    /**
     * @var        PropelObjectCollection|twSubscriptionEmail[] Collection to store aggregation of twSubscriptionEmail objects.
     */
    protected $colltwSubscriptionEmails;

    /**
     * @var        PropelObjectCollection|twSubscriptionListInvitation[] Collection to store aggregation of twSubscriptionListInvitation objects.
     */
    protected $colltwSubscriptionListInvitations;

    /**
     * @var        PropelObjectCollection|twSubscriptionMailing[] Collection to store aggregation of twSubscriptionMailing objects.
     */
    protected $colltwSubscriptionMailings;

    /**
     * @var        PropelObjectCollection|twSubscriptionMailQueue[] Collection to store aggregation of twSubscriptionMailQueue objects.
     */
    protected $colltwSubscriptionMailQueues;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $twSubscriptionEmailsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $twSubscriptionListInvitationsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $twSubscriptionMailingsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $twSubscriptionMailQueuesScheduledForDeletion = null;

    /**
     * Get the [id] column value.
     * 
     * @return   int
     */
    public function getId()
    {

        return $this->id;
    }

    /**
     * Get the [type_id] column value.
     * 
     * @return   int
     */
    public function getTypeId()
    {

        return $this->type_id;
    }

    /**
     * Get the [template_id] column value.
     * 
     * @return   int
     */
    public function getTemplateId()
    {

        return $this->template_id;
    }

    /**
     * Get the [listname] column value.
     * 
     * @return   string
     */
    public function getListname()
    {

        return $this->listname;
    }

    /**
     * Get the [listdesc] column value.
     * 
     * @return   string
     */
    public function getListdesc()
    {

        return $this->listdesc;
    }

    /**
     * Get the [fromname] column value.
     * 
     * @return   string
     */
    public function getFromname()
    {

        return $this->fromname;
    }

    /**
     * Get the [mailfrom] column value.
     * 
     * @return   string
     */
    public function getMailfrom()
    {

        return $this->mailfrom;
    }

    /**
     * Get the [smtphost] column value.
     * 
     * @return   string
     */
    public function getSmtphost()
    {

        return $this->smtphost;
    }

    /**
     * Get the [smtpport] column value.
     * 
     * @return   int
     */
    public function getSmtpport()
    {

        return $this->smtpport;
    }

    /**
     * Get the [smtpencr] column value.
     * 
     * @return   int
     */
    public function getSmtpencr()
    {

        return $this->smtpencr;
    }

    /**
     * Get the [smtpuser] column value.
     * 
     * @return   string
     */
    public function getSmtpuser()
    {

        return $this->smtpuser;
    }

    /**
     * Get the [smtppass] column value.
     * 
     * @return   string
     */
    public function getSmtppass()
    {

        return $this->smtppass;
    }

    /**
     * Get the [website_base_url] column value.
     * 
     * @return   string
     */
    public function getWebsiteBaseUrl()
    {

        return $this->website_base_url;
    }

    /**
     * Get the [website_shared_key] column value.
     * 
     * @return   string
     */
    public function getWebsiteSharedKey()
    {

        return $this->website_shared_key;
    }

    /**
     * Get the [optionally formatted] temporal [lastsync_at] column value.
     * 
     *
     * @param      string $format The date/time format string (either date()-style or strftime()-style).
     *							If format is NULL, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getLastsyncAt($format = 'Y-m-d H:i:s')
    {
        if ($this->lastsync_at === null) {
            return null;
        }


        if ($this->lastsync_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of NULL,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->lastsync_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->lastsync_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is TRUE, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     * 
     * @param      int $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [type_id] column.
     * 
     * @param      int $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setTypeId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->type_id !== $v) {
            $this->type_id = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::TYPE_ID;
        }

        if ($this->atwSubscriptionListType !== null && $this->atwSubscriptionListType->getId() !== $v) {
            $this->atwSubscriptionListType = null;
        }


        return $this;
    } // setTypeId()

    /**
     * Set the value of [template_id] column.
     * 
     * @param      int $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setTemplateId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->template_id !== $v) {
            $this->template_id = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::TEMPLATE_ID;
        }

        if ($this->atwSubscriptionTemplate !== null && $this->atwSubscriptionTemplate->getId() !== $v) {
            $this->atwSubscriptionTemplate = null;
        }


        return $this;
    } // setTemplateId()

    /**
     * Set the value of [listname] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setListname($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->listname !== $v) {
            $this->listname = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::LISTNAME;
        }


        return $this;
    } // setListname()

    /**
     * Set the value of [listdesc] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setListdesc($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->listdesc !== $v) {
            $this->listdesc = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::LISTDESC;
        }


        return $this;
    } // setListdesc()

    /**
     * Set the value of [fromname] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setFromname($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->fromname !== $v) {
            $this->fromname = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::FROMNAME;
        }


        return $this;
    } // setFromname()

    /**
     * Set the value of [mailfrom] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setMailfrom($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->mailfrom !== $v) {
            $this->mailfrom = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::MAILFROM;
        }


        return $this;
    } // setMailfrom()

    /**
     * Set the value of [smtphost] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setSmtphost($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->smtphost !== $v) {
            $this->smtphost = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::SMTPHOST;
        }


        return $this;
    } // setSmtphost()

    /**
     * Set the value of [smtpport] column.
     * 
     * @param      int $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setSmtpport($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->smtpport !== $v) {
            $this->smtpport = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::SMTPPORT;
        }


        return $this;
    } // setSmtpport()

    /**
     * Set the value of [smtpencr] column.
     * 
     * @param      int $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setSmtpencr($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->smtpencr !== $v) {
            $this->smtpencr = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::SMTPENCR;
        }


        return $this;
    } // setSmtpencr()

    /**
     * Set the value of [smtpuser] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setSmtpuser($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->smtpuser !== $v) {
            $this->smtpuser = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::SMTPUSER;
        }


        return $this;
    } // setSmtpuser()

    /**
     * Set the value of [smtppass] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setSmtppass($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->smtppass !== $v) {
            $this->smtppass = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::SMTPPASS;
        }


        return $this;
    } // setSmtppass()

    /**
     * Set the value of [website_base_url] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setWebsiteBaseUrl($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->website_base_url !== $v) {
            $this->website_base_url = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::WEBSITE_BASE_URL;
        }


        return $this;
    } // setWebsiteBaseUrl()

    /**
     * Set the value of [website_shared_key] column.
     * 
     * @param      string $v new value
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setWebsiteSharedKey($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->website_shared_key !== $v) {
            $this->website_shared_key = $v;
            $this->modifiedColumns[] = twSubscriptionListPeer::WEBSITE_SHARED_KEY;
        }


        return $this;
    } // setWebsiteSharedKey()

    /**
     * Sets the value of [lastsync_at] column to a normalized version of the date/time value specified.
     * 
     * @param      mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as NULL.
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function setLastsyncAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->lastsync_at !== null || $dt !== null) {
            $currentDateAsString = ($this->lastsync_at !== null && $tmpDt = new DateTime($this->lastsync_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->lastsync_at = $newDateAsString;
                $this->modifiedColumns[] = twSubscriptionListPeer::LASTSYNC_AT;
            }
        } // if either are not null


        return $this;
    } // setLastsyncAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return TRUE
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->type_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->template_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
            $this->listname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->listdesc = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->fromname = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->mailfrom = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->smtphost = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->smtpport = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->smtpencr = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
            $this->smtpuser = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->smtppass = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->website_base_url = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->website_shared_key = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->lastsync_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 15; // 15 = twSubscriptionListPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating twSubscriptionList object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->atwSubscriptionListType !== null && $this->type_id !== $this->atwSubscriptionListType->getId()) {
            $this->atwSubscriptionListType = null;
        }
        if ($this->atwSubscriptionTemplate !== null && $this->template_id !== $this->atwSubscriptionTemplate->getId()) {
            $this->atwSubscriptionTemplate = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param      boolean $deep (optional) Whether to also de-associated any related objects.
     * @param      PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionListPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = twSubscriptionListPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->atwSubscriptionListType = null;
            $this->atwSubscriptionTemplate = null;
            $this->colltwSubscriptionEmails = null;

            $this->colltwSubscriptionListInvitations = null;

            $this->colltwSubscriptionMailings = null;

            $this->colltwSubscriptionMailQueues = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param      PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionListPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = twSubscriptionListQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasetwSubscriptionList:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasetwSubscriptionList:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param      PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(twSubscriptionListPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasetwSubscriptionList:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasetwSubscriptionList:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

                twSubscriptionListPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param      PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->atwSubscriptionListType !== null) {
                if ($this->atwSubscriptionListType->isModified() || $this->atwSubscriptionListType->isNew()) {
                    $affectedRows += $this->atwSubscriptionListType->save($con);
                }
                $this->settwSubscriptionListType($this->atwSubscriptionListType);
            }

            if ($this->atwSubscriptionTemplate !== null) {
                if ($this->atwSubscriptionTemplate->isModified() || $this->atwSubscriptionTemplate->isNew()) {
                    $affectedRows += $this->atwSubscriptionTemplate->save($con);
                }
                $this->settwSubscriptionTemplate($this->atwSubscriptionTemplate);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->twSubscriptionEmailsScheduledForDeletion !== null) {
                if (!$this->twSubscriptionEmailsScheduledForDeletion->isEmpty()) {
                    twSubscriptionEmailQuery::create()
                        ->filterByPrimaryKeys($this->twSubscriptionEmailsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->twSubscriptionEmailsScheduledForDeletion = null;
                }
            }

            if ($this->colltwSubscriptionEmails !== null) {
                foreach ($this->colltwSubscriptionEmails as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->twSubscriptionListInvitationsScheduledForDeletion !== null) {
                if (!$this->twSubscriptionListInvitationsScheduledForDeletion->isEmpty()) {
                    twSubscriptionListInvitationQuery::create()
                        ->filterByPrimaryKeys($this->twSubscriptionListInvitationsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->twSubscriptionListInvitationsScheduledForDeletion = null;
                }
            }

            if ($this->colltwSubscriptionListInvitations !== null) {
                foreach ($this->colltwSubscriptionListInvitations as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->twSubscriptionMailingsScheduledForDeletion !== null) {
                if (!$this->twSubscriptionMailingsScheduledForDeletion->isEmpty()) {
                    twSubscriptionMailingQuery::create()
                        ->filterByPrimaryKeys($this->twSubscriptionMailingsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->twSubscriptionMailingsScheduledForDeletion = null;
                }
            }

            if ($this->colltwSubscriptionMailings !== null) {
                foreach ($this->colltwSubscriptionMailings as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->twSubscriptionMailQueuesScheduledForDeletion !== null) {
                if (!$this->twSubscriptionMailQueuesScheduledForDeletion->isEmpty()) {
                    twSubscriptionMailQueueQuery::create()
                        ->filterByPrimaryKeys($this->twSubscriptionMailQueuesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->twSubscriptionMailQueuesScheduledForDeletion = null;
                }
            }

            if ($this->colltwSubscriptionMailQueues !== null) {
                foreach ($this->colltwSubscriptionMailQueues as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param      PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = twSubscriptionListPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . twSubscriptionListPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(twSubscriptionListPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::TYPE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`TYPE_ID`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::TEMPLATE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`TEMPLATE_ID`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::LISTNAME)) {
            $modifiedColumns[':p' . $index++]  = '`LISTNAME`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::LISTDESC)) {
            $modifiedColumns[':p' . $index++]  = '`LISTDESC`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::FROMNAME)) {
            $modifiedColumns[':p' . $index++]  = '`FROMNAME`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::MAILFROM)) {
            $modifiedColumns[':p' . $index++]  = '`MAILFROM`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPHOST)) {
            $modifiedColumns[':p' . $index++]  = '`SMTPHOST`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPPORT)) {
            $modifiedColumns[':p' . $index++]  = '`SMTPPORT`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPENCR)) {
            $modifiedColumns[':p' . $index++]  = '`SMTPENCR`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPUSER)) {
            $modifiedColumns[':p' . $index++]  = '`SMTPUSER`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPPASS)) {
            $modifiedColumns[':p' . $index++]  = '`SMTPPASS`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::WEBSITE_BASE_URL)) {
            $modifiedColumns[':p' . $index++]  = '`WEBSITE_BASE_URL`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::WEBSITE_SHARED_KEY)) {
            $modifiedColumns[':p' . $index++]  = '`WEBSITE_SHARED_KEY`';
        }
        if ($this->isColumnModified(twSubscriptionListPeer::LASTSYNC_AT)) {
            $modifiedColumns[':p' . $index++]  = '`LASTSYNC_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `tw_subscription_list` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
						$stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`TYPE_ID`':
						$stmt->bindValue($identifier, $this->type_id, PDO::PARAM_INT);
                        break;
                    case '`TEMPLATE_ID`':
						$stmt->bindValue($identifier, $this->template_id, PDO::PARAM_INT);
                        break;
                    case '`LISTNAME`':
						$stmt->bindValue($identifier, $this->listname, PDO::PARAM_STR);
                        break;
                    case '`LISTDESC`':
						$stmt->bindValue($identifier, $this->listdesc, PDO::PARAM_STR);
                        break;
                    case '`FROMNAME`':
						$stmt->bindValue($identifier, $this->fromname, PDO::PARAM_STR);
                        break;
                    case '`MAILFROM`':
						$stmt->bindValue($identifier, $this->mailfrom, PDO::PARAM_STR);
                        break;
                    case '`SMTPHOST`':
						$stmt->bindValue($identifier, $this->smtphost, PDO::PARAM_STR);
                        break;
                    case '`SMTPPORT`':
						$stmt->bindValue($identifier, $this->smtpport, PDO::PARAM_INT);
                        break;
                    case '`SMTPENCR`':
						$stmt->bindValue($identifier, $this->smtpencr, PDO::PARAM_INT);
                        break;
                    case '`SMTPUSER`':
						$stmt->bindValue($identifier, $this->smtpuser, PDO::PARAM_STR);
                        break;
                    case '`SMTPPASS`':
						$stmt->bindValue($identifier, $this->smtppass, PDO::PARAM_STR);
                        break;
                    case '`WEBSITE_BASE_URL`':
						$stmt->bindValue($identifier, $this->website_base_url, PDO::PARAM_STR);
                        break;
                    case '`WEBSITE_SHARED_KEY`':
						$stmt->bindValue($identifier, $this->website_shared_key, PDO::PARAM_STR);
                        break;
                    case '`LASTSYNC_AT`':
						$stmt->bindValue($identifier, $this->lastsync_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
			$pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param      PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param      mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param      array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->atwSubscriptionListType !== null) {
                if (!$this->atwSubscriptionListType->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->atwSubscriptionListType->getValidationFailures());
                }
            }

            if ($this->atwSubscriptionTemplate !== null) {
                if (!$this->atwSubscriptionTemplate->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->atwSubscriptionTemplate->getValidationFailures());
                }
            }


            if (($retval = twSubscriptionListPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->colltwSubscriptionEmails !== null) {
                    foreach ($this->colltwSubscriptionEmails as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->colltwSubscriptionListInvitations !== null) {
                    foreach ($this->colltwSubscriptionListInvitations as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->colltwSubscriptionMailings !== null) {
                    foreach ($this->colltwSubscriptionMailings as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->colltwSubscriptionMailQueues !== null) {
                    foreach ($this->colltwSubscriptionMailQueues as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param      string $name name
     * @param      string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = twSubscriptionListPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param      int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getTypeId();
                break;
            case 2:
                return $this->getTemplateId();
                break;
            case 3:
                return $this->getListname();
                break;
            case 4:
                return $this->getListdesc();
                break;
            case 5:
                return $this->getFromname();
                break;
            case 6:
                return $this->getMailfrom();
                break;
            case 7:
                return $this->getSmtphost();
                break;
            case 8:
                return $this->getSmtpport();
                break;
            case 9:
                return $this->getSmtpencr();
                break;
            case 10:
                return $this->getSmtpuser();
                break;
            case 11:
                return $this->getSmtppass();
                break;
            case 12:
                return $this->getWebsiteBaseUrl();
                break;
            case 13:
                return $this->getWebsiteSharedKey();
                break;
            case 14:
                return $this->getLastsyncAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['twSubscriptionList'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['twSubscriptionList'][$this->getPrimaryKey()] = true;
        $keys = twSubscriptionListPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getTypeId(),
            $keys[2] => $this->getTemplateId(),
            $keys[3] => $this->getListname(),
            $keys[4] => $this->getListdesc(),
            $keys[5] => $this->getFromname(),
            $keys[6] => $this->getMailfrom(),
            $keys[7] => $this->getSmtphost(),
            $keys[8] => $this->getSmtpport(),
            $keys[9] => $this->getSmtpencr(),
            $keys[10] => $this->getSmtpuser(),
            $keys[11] => $this->getSmtppass(),
            $keys[12] => $this->getWebsiteBaseUrl(),
            $keys[13] => $this->getWebsiteSharedKey(),
            $keys[14] => $this->getLastsyncAt(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->atwSubscriptionListType) {
                $result['twSubscriptionListType'] = $this->atwSubscriptionListType->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->atwSubscriptionTemplate) {
                $result['twSubscriptionTemplate'] = $this->atwSubscriptionTemplate->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->colltwSubscriptionEmails) {
                $result['twSubscriptionEmails'] = $this->colltwSubscriptionEmails->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->colltwSubscriptionListInvitations) {
                $result['twSubscriptionListInvitations'] = $this->colltwSubscriptionListInvitations->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->colltwSubscriptionMailings) {
                $result['twSubscriptionMailings'] = $this->colltwSubscriptionMailings->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->colltwSubscriptionMailQueues) {
                $result['twSubscriptionMailQueues'] = $this->colltwSubscriptionMailQueues->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param      string $name peer name
     * @param      mixed $value field value
     * @param      string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = twSubscriptionListPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param      int $pos position in xml schema
     * @param      mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setTypeId($value);
                break;
            case 2:
                $this->setTemplateId($value);
                break;
            case 3:
                $this->setListname($value);
                break;
            case 4:
                $this->setListdesc($value);
                break;
            case 5:
                $this->setFromname($value);
                break;
            case 6:
                $this->setMailfrom($value);
                break;
            case 7:
                $this->setSmtphost($value);
                break;
            case 8:
                $this->setSmtpport($value);
                break;
            case 9:
                $this->setSmtpencr($value);
                break;
            case 10:
                $this->setSmtpuser($value);
                break;
            case 11:
                $this->setSmtppass($value);
                break;
            case 12:
                $this->setWebsiteBaseUrl($value);
                break;
            case 13:
                $this->setWebsiteSharedKey($value);
                break;
            case 14:
                $this->setLastsyncAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param      array  $arr     An array to populate the object from.
     * @param      string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = twSubscriptionListPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setTypeId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setTemplateId($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setListname($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setListdesc($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setFromname($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setMailfrom($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setSmtphost($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setSmtpport($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setSmtpencr($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setSmtpuser($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setSmtppass($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setWebsiteBaseUrl($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setWebsiteSharedKey($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setLastsyncAt($arr[$keys[14]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(twSubscriptionListPeer::DATABASE_NAME);

        if ($this->isColumnModified(twSubscriptionListPeer::ID)) $criteria->add(twSubscriptionListPeer::ID, $this->id);
        if ($this->isColumnModified(twSubscriptionListPeer::TYPE_ID)) $criteria->add(twSubscriptionListPeer::TYPE_ID, $this->type_id);
        if ($this->isColumnModified(twSubscriptionListPeer::TEMPLATE_ID)) $criteria->add(twSubscriptionListPeer::TEMPLATE_ID, $this->template_id);
        if ($this->isColumnModified(twSubscriptionListPeer::LISTNAME)) $criteria->add(twSubscriptionListPeer::LISTNAME, $this->listname);
        if ($this->isColumnModified(twSubscriptionListPeer::LISTDESC)) $criteria->add(twSubscriptionListPeer::LISTDESC, $this->listdesc);
        if ($this->isColumnModified(twSubscriptionListPeer::FROMNAME)) $criteria->add(twSubscriptionListPeer::FROMNAME, $this->fromname);
        if ($this->isColumnModified(twSubscriptionListPeer::MAILFROM)) $criteria->add(twSubscriptionListPeer::MAILFROM, $this->mailfrom);
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPHOST)) $criteria->add(twSubscriptionListPeer::SMTPHOST, $this->smtphost);
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPPORT)) $criteria->add(twSubscriptionListPeer::SMTPPORT, $this->smtpport);
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPENCR)) $criteria->add(twSubscriptionListPeer::SMTPENCR, $this->smtpencr);
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPUSER)) $criteria->add(twSubscriptionListPeer::SMTPUSER, $this->smtpuser);
        if ($this->isColumnModified(twSubscriptionListPeer::SMTPPASS)) $criteria->add(twSubscriptionListPeer::SMTPPASS, $this->smtppass);
        if ($this->isColumnModified(twSubscriptionListPeer::WEBSITE_BASE_URL)) $criteria->add(twSubscriptionListPeer::WEBSITE_BASE_URL, $this->website_base_url);
        if ($this->isColumnModified(twSubscriptionListPeer::WEBSITE_SHARED_KEY)) $criteria->add(twSubscriptionListPeer::WEBSITE_SHARED_KEY, $this->website_shared_key);
        if ($this->isColumnModified(twSubscriptionListPeer::LASTSYNC_AT)) $criteria->add(twSubscriptionListPeer::LASTSYNC_AT, $this->lastsync_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(twSubscriptionListPeer::DATABASE_NAME);
        $criteria->add(twSubscriptionListPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return   int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param       int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param      object $copyObj An object of twSubscriptionList (or compatible) type.
     * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setTypeId($this->getTypeId());
        $copyObj->setTemplateId($this->getTemplateId());
        $copyObj->setListname($this->getListname());
        $copyObj->setListdesc($this->getListdesc());
        $copyObj->setFromname($this->getFromname());
        $copyObj->setMailfrom($this->getMailfrom());
        $copyObj->setSmtphost($this->getSmtphost());
        $copyObj->setSmtpport($this->getSmtpport());
        $copyObj->setSmtpencr($this->getSmtpencr());
        $copyObj->setSmtpuser($this->getSmtpuser());
        $copyObj->setSmtppass($this->getSmtppass());
        $copyObj->setWebsiteBaseUrl($this->getWebsiteBaseUrl());
        $copyObj->setWebsiteSharedKey($this->getWebsiteSharedKey());
        $copyObj->setLastsyncAt($this->getLastsyncAt());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->gettwSubscriptionEmails() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addtwSubscriptionEmail($relObj->copy($deepCopy));
                }
            }

            foreach ($this->gettwSubscriptionListInvitations() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addtwSubscriptionListInvitation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->gettwSubscriptionMailings() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addtwSubscriptionMailing($relObj->copy($deepCopy));
                }
            }

            foreach ($this->gettwSubscriptionMailQueues() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addtwSubscriptionMailQueue($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return                 twSubscriptionList Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return   twSubscriptionListPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new twSubscriptionListPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a twSubscriptionListType object.
     *
     * @param                  twSubscriptionListType $v
     * @return                 twSubscriptionList The current object (for fluent API support)
     * @throws PropelException
     */
    public function settwSubscriptionListType(twSubscriptionListType $v = null)
    {
        if ($v === null) {
            $this->setTypeId(NULL);
        } else {
            $this->setTypeId($v->getId());
        }

        $this->atwSubscriptionListType = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the twSubscriptionListType object, it will not be re-added.
        if ($v !== null) {
            $v->addtwSubscriptionList($this);
        }


        return $this;
    }


    /**
     * Get the associated twSubscriptionListType object
     *
     * @param      PropelPDO $con Optional Connection object.
     * @return                 twSubscriptionListType The associated twSubscriptionListType object.
     * @throws PropelException
     */
    public function gettwSubscriptionListType(PropelPDO $con = null)
    {
        if ($this->atwSubscriptionListType === null && ($this->type_id !== null)) {
            $this->atwSubscriptionListType = twSubscriptionListTypeQuery::create()->findPk($this->type_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->atwSubscriptionListType->addtwSubscriptionLists($this);
             */
        }

        return $this->atwSubscriptionListType;
    }

    /**
     * Declares an association between this object and a twSubscriptionTemplate object.
     *
     * @param                  twSubscriptionTemplate $v
     * @return                 twSubscriptionList The current object (for fluent API support)
     * @throws PropelException
     */
    public function settwSubscriptionTemplate(twSubscriptionTemplate $v = null)
    {
        if ($v === null) {
            $this->setTemplateId(NULL);
        } else {
            $this->setTemplateId($v->getId());
        }

        $this->atwSubscriptionTemplate = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the twSubscriptionTemplate object, it will not be re-added.
        if ($v !== null) {
            $v->addtwSubscriptionList($this);
        }


        return $this;
    }


    /**
     * Get the associated twSubscriptionTemplate object
     *
     * @param      PropelPDO $con Optional Connection object.
     * @return                 twSubscriptionTemplate The associated twSubscriptionTemplate object.
     * @throws PropelException
     */
    public function gettwSubscriptionTemplate(PropelPDO $con = null)
    {
        if ($this->atwSubscriptionTemplate === null && ($this->template_id !== null)) {
            $this->atwSubscriptionTemplate = twSubscriptionTemplateQuery::create()->findPk($this->template_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->atwSubscriptionTemplate->addtwSubscriptionLists($this);
             */
        }

        return $this->atwSubscriptionTemplate;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param      string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('twSubscriptionEmail' == $relationName) {
            $this->inittwSubscriptionEmails();
        }
        if ('twSubscriptionListInvitation' == $relationName) {
            $this->inittwSubscriptionListInvitations();
        }
        if ('twSubscriptionMailing' == $relationName) {
            $this->inittwSubscriptionMailings();
        }
        if ('twSubscriptionMailQueue' == $relationName) {
            $this->inittwSubscriptionMailQueues();
        }
    }

    /**
     * Clears out the colltwSubscriptionEmails collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addtwSubscriptionEmails()
     */
    public function cleartwSubscriptionEmails()
    {
        $this->colltwSubscriptionEmails = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the colltwSubscriptionEmails collection.
     *
     * By default this just sets the colltwSubscriptionEmails collection to an empty array (like clearcolltwSubscriptionEmails());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function inittwSubscriptionEmails($overrideExisting = true)
    {
        if (null !== $this->colltwSubscriptionEmails && !$overrideExisting) {
            return;
        }
        $this->colltwSubscriptionEmails = new PropelObjectCollection();
        $this->colltwSubscriptionEmails->setModel('twSubscriptionEmail');
    }

    /**
     * Gets an array of twSubscriptionEmail objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this twSubscriptionList is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|twSubscriptionEmail[] List of twSubscriptionEmail objects
     * @throws PropelException
     */
    public function gettwSubscriptionEmails($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionEmails || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionEmails) {
                // return empty collection
                $this->inittwSubscriptionEmails();
            } else {
                $colltwSubscriptionEmails = twSubscriptionEmailQuery::create(null, $criteria)
                    ->filterBytwSubscriptionList($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $colltwSubscriptionEmails;
                }
                $this->colltwSubscriptionEmails = $colltwSubscriptionEmails;
            }
        }

        return $this->colltwSubscriptionEmails;
    }

    /**
     * Sets a collection of twSubscriptionEmail objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $twSubscriptionEmails A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function settwSubscriptionEmails(PropelCollection $twSubscriptionEmails, PropelPDO $con = null)
    {
        $this->twSubscriptionEmailsScheduledForDeletion = $this->gettwSubscriptionEmails(new Criteria(), $con)->diff($twSubscriptionEmails);

        foreach ($this->twSubscriptionEmailsScheduledForDeletion as $twSubscriptionEmailRemoved) {
            $twSubscriptionEmailRemoved->settwSubscriptionList(null);
        }

        $this->colltwSubscriptionEmails = null;
        foreach ($twSubscriptionEmails as $twSubscriptionEmail) {
            $this->addtwSubscriptionEmail($twSubscriptionEmail);
        }

        $this->colltwSubscriptionEmails = $twSubscriptionEmails;
    }

    /**
     * Returns the number of related twSubscriptionEmail objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related twSubscriptionEmail objects.
     * @throws PropelException
     */
    public function counttwSubscriptionEmails(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionEmails || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionEmails) {
                return 0;
            } else {
                $query = twSubscriptionEmailQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterBytwSubscriptionList($this)
                    ->count($con);
            }
        } else {
            return count($this->colltwSubscriptionEmails);
        }
    }

    /**
     * Method called to associate a twSubscriptionEmail object to this object
     * through the twSubscriptionEmail foreign key attribute.
     *
     * @param    twSubscriptionEmail $l twSubscriptionEmail
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function addtwSubscriptionEmail(twSubscriptionEmail $l)
    {
        if ($this->colltwSubscriptionEmails === null) {
            $this->inittwSubscriptionEmails();
        }
        if (!$this->colltwSubscriptionEmails->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddtwSubscriptionEmail($l);
        }

        return $this;
    }

    /**
     * @param	twSubscriptionEmail $twSubscriptionEmail The twSubscriptionEmail object to add.
     */
    protected function doAddtwSubscriptionEmail($twSubscriptionEmail)
    {
        $this->colltwSubscriptionEmails[]= $twSubscriptionEmail;
        $twSubscriptionEmail->settwSubscriptionList($this);
    }

    /**
     * @param	twSubscriptionEmail $twSubscriptionEmail The twSubscriptionEmail object to remove.
     */
    public function removetwSubscriptionEmail($twSubscriptionEmail)
    {
        if ($this->gettwSubscriptionEmails()->contains($twSubscriptionEmail)) {
            $this->colltwSubscriptionEmails->remove($this->colltwSubscriptionEmails->search($twSubscriptionEmail));
            if (null === $this->twSubscriptionEmailsScheduledForDeletion) {
                $this->twSubscriptionEmailsScheduledForDeletion = clone $this->colltwSubscriptionEmails;
                $this->twSubscriptionEmailsScheduledForDeletion->clear();
            }
            $this->twSubscriptionEmailsScheduledForDeletion[]= $twSubscriptionEmail;
            $twSubscriptionEmail->settwSubscriptionList(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionEmails from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionEmail[] List of twSubscriptionEmail objects
     */
    public function gettwSubscriptionEmailsJointwSubscriptionStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionEmailQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionStatus', $join_behavior);

        return $this->gettwSubscriptionEmails($query, $con);
    }

    /**
     * Clears out the colltwSubscriptionListInvitations collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addtwSubscriptionListInvitations()
     */
    public function cleartwSubscriptionListInvitations()
    {
        $this->colltwSubscriptionListInvitations = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the colltwSubscriptionListInvitations collection.
     *
     * By default this just sets the colltwSubscriptionListInvitations collection to an empty array (like clearcolltwSubscriptionListInvitations());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function inittwSubscriptionListInvitations($overrideExisting = true)
    {
        if (null !== $this->colltwSubscriptionListInvitations && !$overrideExisting) {
            return;
        }
        $this->colltwSubscriptionListInvitations = new PropelObjectCollection();
        $this->colltwSubscriptionListInvitations->setModel('twSubscriptionListInvitation');
    }

    /**
     * Gets an array of twSubscriptionListInvitation objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this twSubscriptionList is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|twSubscriptionListInvitation[] List of twSubscriptionListInvitation objects
     * @throws PropelException
     */
    public function gettwSubscriptionListInvitations($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionListInvitations || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionListInvitations) {
                // return empty collection
                $this->inittwSubscriptionListInvitations();
            } else {
                $colltwSubscriptionListInvitations = twSubscriptionListInvitationQuery::create(null, $criteria)
                    ->filterBytwSubscriptionList($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $colltwSubscriptionListInvitations;
                }
                $this->colltwSubscriptionListInvitations = $colltwSubscriptionListInvitations;
            }
        }

        return $this->colltwSubscriptionListInvitations;
    }

    /**
     * Sets a collection of twSubscriptionListInvitation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $twSubscriptionListInvitations A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function settwSubscriptionListInvitations(PropelCollection $twSubscriptionListInvitations, PropelPDO $con = null)
    {
        $this->twSubscriptionListInvitationsScheduledForDeletion = $this->gettwSubscriptionListInvitations(new Criteria(), $con)->diff($twSubscriptionListInvitations);

        foreach ($this->twSubscriptionListInvitationsScheduledForDeletion as $twSubscriptionListInvitationRemoved) {
            $twSubscriptionListInvitationRemoved->settwSubscriptionList(null);
        }

        $this->colltwSubscriptionListInvitations = null;
        foreach ($twSubscriptionListInvitations as $twSubscriptionListInvitation) {
            $this->addtwSubscriptionListInvitation($twSubscriptionListInvitation);
        }

        $this->colltwSubscriptionListInvitations = $twSubscriptionListInvitations;
    }

    /**
     * Returns the number of related twSubscriptionListInvitation objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related twSubscriptionListInvitation objects.
     * @throws PropelException
     */
    public function counttwSubscriptionListInvitations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionListInvitations || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionListInvitations) {
                return 0;
            } else {
                $query = twSubscriptionListInvitationQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterBytwSubscriptionList($this)
                    ->count($con);
            }
        } else {
            return count($this->colltwSubscriptionListInvitations);
        }
    }

    /**
     * Method called to associate a twSubscriptionListInvitation object to this object
     * through the twSubscriptionListInvitation foreign key attribute.
     *
     * @param    twSubscriptionListInvitation $l twSubscriptionListInvitation
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function addtwSubscriptionListInvitation(twSubscriptionListInvitation $l)
    {
        if ($this->colltwSubscriptionListInvitations === null) {
            $this->inittwSubscriptionListInvitations();
        }
        if (!$this->colltwSubscriptionListInvitations->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddtwSubscriptionListInvitation($l);
        }

        return $this;
    }

    /**
     * @param	twSubscriptionListInvitation $twSubscriptionListInvitation The twSubscriptionListInvitation object to add.
     */
    protected function doAddtwSubscriptionListInvitation($twSubscriptionListInvitation)
    {
        $this->colltwSubscriptionListInvitations[]= $twSubscriptionListInvitation;
        $twSubscriptionListInvitation->settwSubscriptionList($this);
    }

    /**
     * @param	twSubscriptionListInvitation $twSubscriptionListInvitation The twSubscriptionListInvitation object to remove.
     */
    public function removetwSubscriptionListInvitation($twSubscriptionListInvitation)
    {
        if ($this->gettwSubscriptionListInvitations()->contains($twSubscriptionListInvitation)) {
            $this->colltwSubscriptionListInvitations->remove($this->colltwSubscriptionListInvitations->search($twSubscriptionListInvitation));
            if (null === $this->twSubscriptionListInvitationsScheduledForDeletion) {
                $this->twSubscriptionListInvitationsScheduledForDeletion = clone $this->colltwSubscriptionListInvitations;
                $this->twSubscriptionListInvitationsScheduledForDeletion->clear();
            }
            $this->twSubscriptionListInvitationsScheduledForDeletion[]= $twSubscriptionListInvitation;
            $twSubscriptionListInvitation->settwSubscriptionList(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionListInvitations from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionListInvitation[] List of twSubscriptionListInvitation objects
     */
    public function gettwSubscriptionListInvitationsJointwSubscriptionMessageType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionListInvitationQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionMessageType', $join_behavior);

        return $this->gettwSubscriptionListInvitations($query, $con);
    }

    /**
     * Clears out the colltwSubscriptionMailings collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addtwSubscriptionMailings()
     */
    public function cleartwSubscriptionMailings()
    {
        $this->colltwSubscriptionMailings = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the colltwSubscriptionMailings collection.
     *
     * By default this just sets the colltwSubscriptionMailings collection to an empty array (like clearcolltwSubscriptionMailings());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function inittwSubscriptionMailings($overrideExisting = true)
    {
        if (null !== $this->colltwSubscriptionMailings && !$overrideExisting) {
            return;
        }
        $this->colltwSubscriptionMailings = new PropelObjectCollection();
        $this->colltwSubscriptionMailings->setModel('twSubscriptionMailing');
    }

    /**
     * Gets an array of twSubscriptionMailing objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this twSubscriptionList is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|twSubscriptionMailing[] List of twSubscriptionMailing objects
     * @throws PropelException
     */
    public function gettwSubscriptionMailings($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionMailings || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionMailings) {
                // return empty collection
                $this->inittwSubscriptionMailings();
            } else {
                $colltwSubscriptionMailings = twSubscriptionMailingQuery::create(null, $criteria)
                    ->filterBytwSubscriptionList($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $colltwSubscriptionMailings;
                }
                $this->colltwSubscriptionMailings = $colltwSubscriptionMailings;
            }
        }

        return $this->colltwSubscriptionMailings;
    }

    /**
     * Sets a collection of twSubscriptionMailing objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $twSubscriptionMailings A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function settwSubscriptionMailings(PropelCollection $twSubscriptionMailings, PropelPDO $con = null)
    {
        $this->twSubscriptionMailingsScheduledForDeletion = $this->gettwSubscriptionMailings(new Criteria(), $con)->diff($twSubscriptionMailings);

        foreach ($this->twSubscriptionMailingsScheduledForDeletion as $twSubscriptionMailingRemoved) {
            $twSubscriptionMailingRemoved->settwSubscriptionList(null);
        }

        $this->colltwSubscriptionMailings = null;
        foreach ($twSubscriptionMailings as $twSubscriptionMailing) {
            $this->addtwSubscriptionMailing($twSubscriptionMailing);
        }

        $this->colltwSubscriptionMailings = $twSubscriptionMailings;
    }

    /**
     * Returns the number of related twSubscriptionMailing objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related twSubscriptionMailing objects.
     * @throws PropelException
     */
    public function counttwSubscriptionMailings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionMailings || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionMailings) {
                return 0;
            } else {
                $query = twSubscriptionMailingQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterBytwSubscriptionList($this)
                    ->count($con);
            }
        } else {
            return count($this->colltwSubscriptionMailings);
        }
    }

    /**
     * Method called to associate a twSubscriptionMailing object to this object
     * through the twSubscriptionMailing foreign key attribute.
     *
     * @param    twSubscriptionMailing $l twSubscriptionMailing
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function addtwSubscriptionMailing(twSubscriptionMailing $l)
    {
        if ($this->colltwSubscriptionMailings === null) {
            $this->inittwSubscriptionMailings();
        }
        if (!$this->colltwSubscriptionMailings->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddtwSubscriptionMailing($l);
        }

        return $this;
    }

    /**
     * @param	twSubscriptionMailing $twSubscriptionMailing The twSubscriptionMailing object to add.
     */
    protected function doAddtwSubscriptionMailing($twSubscriptionMailing)
    {
        $this->colltwSubscriptionMailings[]= $twSubscriptionMailing;
        $twSubscriptionMailing->settwSubscriptionList($this);
    }

    /**
     * @param	twSubscriptionMailing $twSubscriptionMailing The twSubscriptionMailing object to remove.
     */
    public function removetwSubscriptionMailing($twSubscriptionMailing)
    {
        if ($this->gettwSubscriptionMailings()->contains($twSubscriptionMailing)) {
            $this->colltwSubscriptionMailings->remove($this->colltwSubscriptionMailings->search($twSubscriptionMailing));
            if (null === $this->twSubscriptionMailingsScheduledForDeletion) {
                $this->twSubscriptionMailingsScheduledForDeletion = clone $this->colltwSubscriptionMailings;
                $this->twSubscriptionMailingsScheduledForDeletion->clear();
            }
            $this->twSubscriptionMailingsScheduledForDeletion[]= $twSubscriptionMailing;
            $twSubscriptionMailing->settwSubscriptionList(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionMailings from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionMailing[] List of twSubscriptionMailing objects
     */
    public function gettwSubscriptionMailingsJointwSubscriptionMessage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionMailingQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionMessage', $join_behavior);

        return $this->gettwSubscriptionMailings($query, $con);
    }

    /**
     * Clears out the colltwSubscriptionMailQueues collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addtwSubscriptionMailQueues()
     */
    public function cleartwSubscriptionMailQueues()
    {
        $this->colltwSubscriptionMailQueues = null; // important to set this to NULL since that means it is uninitialized
    }

    /**
     * Initializes the colltwSubscriptionMailQueues collection.
     *
     * By default this just sets the colltwSubscriptionMailQueues collection to an empty array (like clearcolltwSubscriptionMailQueues());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param      boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function inittwSubscriptionMailQueues($overrideExisting = true)
    {
        if (null !== $this->colltwSubscriptionMailQueues && !$overrideExisting) {
            return;
        }
        $this->colltwSubscriptionMailQueues = new PropelObjectCollection();
        $this->colltwSubscriptionMailQueues->setModel('twSubscriptionMailQueue');
    }

    /**
     * Gets an array of twSubscriptionMailQueue objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this twSubscriptionList is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @return PropelObjectCollection|twSubscriptionMailQueue[] List of twSubscriptionMailQueue objects
     * @throws PropelException
     */
    public function gettwSubscriptionMailQueues($criteria = null, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionMailQueues || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionMailQueues) {
                // return empty collection
                $this->inittwSubscriptionMailQueues();
            } else {
                $colltwSubscriptionMailQueues = twSubscriptionMailQueueQuery::create(null, $criteria)
                    ->filterBytwSubscriptionList($this)
                    ->find($con);
                if (null !== $criteria) {
                    return $colltwSubscriptionMailQueues;
                }
                $this->colltwSubscriptionMailQueues = $colltwSubscriptionMailQueues;
            }
        }

        return $this->colltwSubscriptionMailQueues;
    }

    /**
     * Sets a collection of twSubscriptionMailQueue objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param      PropelCollection $twSubscriptionMailQueues A Propel collection.
     * @param      PropelPDO $con Optional connection object
     */
    public function settwSubscriptionMailQueues(PropelCollection $twSubscriptionMailQueues, PropelPDO $con = null)
    {
        $this->twSubscriptionMailQueuesScheduledForDeletion = $this->gettwSubscriptionMailQueues(new Criteria(), $con)->diff($twSubscriptionMailQueues);

        foreach ($this->twSubscriptionMailQueuesScheduledForDeletion as $twSubscriptionMailQueueRemoved) {
            $twSubscriptionMailQueueRemoved->settwSubscriptionList(null);
        }

        $this->colltwSubscriptionMailQueues = null;
        foreach ($twSubscriptionMailQueues as $twSubscriptionMailQueue) {
            $this->addtwSubscriptionMailQueue($twSubscriptionMailQueue);
        }

        $this->colltwSubscriptionMailQueues = $twSubscriptionMailQueues;
    }

    /**
     * Returns the number of related twSubscriptionMailQueue objects.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct
     * @param      PropelPDO $con
     * @return int             Count of related twSubscriptionMailQueue objects.
     * @throws PropelException
     */
    public function counttwSubscriptionMailQueues(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        if (null === $this->colltwSubscriptionMailQueues || null !== $criteria) {
            if ($this->isNew() && null === $this->colltwSubscriptionMailQueues) {
                return 0;
            } else {
                $query = twSubscriptionMailQueueQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterBytwSubscriptionList($this)
                    ->count($con);
            }
        } else {
            return count($this->colltwSubscriptionMailQueues);
        }
    }

    /**
     * Method called to associate a twSubscriptionMailQueue object to this object
     * through the twSubscriptionMailQueue foreign key attribute.
     *
     * @param    twSubscriptionMailQueue $l twSubscriptionMailQueue
     * @return   twSubscriptionList The current object (for fluent API support)
     */
    public function addtwSubscriptionMailQueue(twSubscriptionMailQueue $l)
    {
        if ($this->colltwSubscriptionMailQueues === null) {
            $this->inittwSubscriptionMailQueues();
        }
        if (!$this->colltwSubscriptionMailQueues->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddtwSubscriptionMailQueue($l);
        }

        return $this;
    }

    /**
     * @param	twSubscriptionMailQueue $twSubscriptionMailQueue The twSubscriptionMailQueue object to add.
     */
    protected function doAddtwSubscriptionMailQueue($twSubscriptionMailQueue)
    {
        $this->colltwSubscriptionMailQueues[]= $twSubscriptionMailQueue;
        $twSubscriptionMailQueue->settwSubscriptionList($this);
    }

    /**
     * @param	twSubscriptionMailQueue $twSubscriptionMailQueue The twSubscriptionMailQueue object to remove.
     */
    public function removetwSubscriptionMailQueue($twSubscriptionMailQueue)
    {
        if ($this->gettwSubscriptionMailQueues()->contains($twSubscriptionMailQueue)) {
            $this->colltwSubscriptionMailQueues->remove($this->colltwSubscriptionMailQueues->search($twSubscriptionMailQueue));
            if (null === $this->twSubscriptionMailQueuesScheduledForDeletion) {
                $this->twSubscriptionMailQueuesScheduledForDeletion = clone $this->colltwSubscriptionMailQueues;
                $this->twSubscriptionMailQueuesScheduledForDeletion->clear();
            }
            $this->twSubscriptionMailQueuesScheduledForDeletion[]= $twSubscriptionMailQueue;
            $twSubscriptionMailQueue->settwSubscriptionList(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionMailQueues from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionMailQueue[] List of twSubscriptionMailQueue objects
     */
    public function gettwSubscriptionMailQueuesJointwSubscriptionMailing($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionMailQueueQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionMailing', $join_behavior);

        return $this->gettwSubscriptionMailQueues($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionMailQueues from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionMailQueue[] List of twSubscriptionMailQueue objects
     */
    public function gettwSubscriptionMailQueuesJointwSubscriptionMessage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionMailQueueQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionMessage', $join_behavior);

        return $this->gettwSubscriptionMailQueues($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this twSubscriptionList is new, it will return
     * an empty collection; or if this twSubscriptionList has previously
     * been saved, it will retrieve related twSubscriptionMailQueues from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in twSubscriptionList.
     *
     * @param      Criteria $criteria optional Criteria object to narrow the query
     * @param      PropelPDO $con optional connection object
     * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|twSubscriptionMailQueue[] List of twSubscriptionMailQueue objects
     */
    public function gettwSubscriptionMailQueuesJointwSubscriptionMessageType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = twSubscriptionMailQueueQuery::create(null, $criteria);
        $query->joinWith('twSubscriptionMessageType', $join_behavior);

        return $this->gettwSubscriptionMailQueues($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->type_id = null;
        $this->template_id = null;
        $this->listname = null;
        $this->listdesc = null;
        $this->fromname = null;
        $this->mailfrom = null;
        $this->smtphost = null;
        $this->smtpport = null;
        $this->smtpencr = null;
        $this->smtpuser = null;
        $this->smtppass = null;
        $this->website_base_url = null;
        $this->website_shared_key = null;
        $this->lastsync_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param      boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->colltwSubscriptionEmails) {
                foreach ($this->colltwSubscriptionEmails as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->colltwSubscriptionListInvitations) {
                foreach ($this->colltwSubscriptionListInvitations as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->colltwSubscriptionMailings) {
                foreach ($this->colltwSubscriptionMailings as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->colltwSubscriptionMailQueues) {
                foreach ($this->colltwSubscriptionMailQueues as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->colltwSubscriptionEmails instanceof PropelCollection) {
            $this->colltwSubscriptionEmails->clearIterator();
        }
        $this->colltwSubscriptionEmails = null;
        if ($this->colltwSubscriptionListInvitations instanceof PropelCollection) {
            $this->colltwSubscriptionListInvitations->clearIterator();
        }
        $this->colltwSubscriptionListInvitations = null;
        if ($this->colltwSubscriptionMailings instanceof PropelCollection) {
            $this->colltwSubscriptionMailings->clearIterator();
        }
        $this->colltwSubscriptionMailings = null;
        if ($this->colltwSubscriptionMailQueues instanceof PropelCollection) {
            $this->colltwSubscriptionMailQueues->clearIterator();
        }
        $this->colltwSubscriptionMailQueues = null;
        $this->atwSubscriptionListType = null;
        $this->atwSubscriptionTemplate = null;
    }

    /**
     * Return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(twSubscriptionListPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {
        
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BasetwSubscriptionList:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}


        return parent::__call($name, $params);
    }

} // BasetwSubscriptionList
